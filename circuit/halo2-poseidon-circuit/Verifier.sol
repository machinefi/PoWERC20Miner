
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract Halo2Verifier {
    fallback(bytes calldata) external returns (bytes memory) {
        assembly ("memory-safe") {
            // Enforce that Solidity memory layout is respected
            let data := mload(0x40)
            if iszero(eq(data, 0x80)) {
                revert(0, 0)
            }

            let success := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }

            function process_point(offset, memOffset, _success) -> valid {
                let x := calldataload(offset)
                mstore(memOffset, x)
                let y := calldataload(add(offset, 0x20))
                mstore(add(memOffset, 0x20), y)
                valid := and(validate_ec_point(x, y), _success)
            }

            function hash_mod_store(location, _f_q) {
                let hash := mload(location)
                mstore(add(location, 0x20), mod(hash, _f_q))
                mstore(add(location, 0x40), hash)
            }

            mstore(0xa0, mod(calldataload(0x0), f_q))
mstore(0xc0, mod(calldataload(0x20), f_q))
mstore(0xe0, mod(calldataload(0x40), f_q))
mstore(0x100, mod(calldataload(0x60), f_q))
mstore(0x80, 237698769335267998833939970401219170754774848496152850656429241638002306530)

            success := process_point(0x80, 0x120, success)
            success := process_point(0xc0, 0x160, success)
            success := process_point(0x100, 0x1a0, success)
            success := process_point(0x140, 0x1e0, success)
            success := process_point(0x180, 0x220, success)
            success := process_point(0x1c0, 0x260, success)
            success := process_point(0x200, 0x2a0, success)
            success := process_point(0x240, 0x2e0, success)
            success := process_point(0x280, 0x320, success)
            success := process_point(0x2c0, 0x360, success)
            success := process_point(0x300, 0x3a0, success)
            success := process_point(0x340, 0x3e0, success)
            success := process_point(0x380, 0x420, success)
            success := process_point(0x3c0, 0x460, success)
            success := process_point(0x400, 0x4a0, success)
            success := process_point(0x440, 0x4e0, success)
            success := process_point(0x480, 0x520, success)
            success := process_point(0x4c0, 0x560, success)
            success := process_point(0x500, 0x5a0, success)
            success := process_point(0x540, 0x5e0, success)
            success := process_point(0x580, 0x620, success)

mstore(0x660, keccak256(0x80, 1504))
            hash_mod_store(0x660, f_q)
mstore8(1728, 1)
mstore(0x6c0, keccak256(0x6a0, 33))
            hash_mod_store(0x6c0, f_q)
mstore8(1824, 1)
mstore(0x720, keccak256(0x700, 33))
            hash_mod_store(0x720, f_q)

            success := process_point(0x5c0, 0x780, success)
            success := process_point(0x600, 0x7c0, success)
            success := process_point(0x640, 0x800, success)
            success := process_point(0x680, 0x840, success)
            success := process_point(0x6c0, 0x880, success)
            success := process_point(0x700, 0x8c0, success)
            success := process_point(0x740, 0x900, success)
            success := process_point(0x780, 0x940, success)
            success := process_point(0x7c0, 0x980, success)

mstore(0x9c0, keccak256(0x760, 608))
            hash_mod_store(0x9c0, f_q)

            success := process_point(0x800, 0xa20, success)
            success := process_point(0x840, 0xa60, success)
            success := process_point(0x880, 0xaa0, success)
            success := process_point(0x8c0, 0xae0, success)
            success := process_point(0x900, 0xb20, success)

mstore(0xb60, keccak256(0xa00, 352))
            hash_mod_store(0xb60, f_q)

        let i := 0x940
        for { let j := 0xbc0 } lt(j, 0x1800) { i := add(i, 0x20) j := add(j, 0x20) } {
            mstore(j, mod(calldataload(i), f_q))
        }

mstore(0x1800, keccak256(0xba0, 3168))
            hash_mod_store(0x1800, f_q)

            success := process_point(0x1580, 0x1860, success)
            success := process_point(0x15c0, 0x18a0, success)
            success := process_point(0x1600, 0x18e0, success)
            success := process_point(0x1640, 0x1920, success)

mstore(0x1960, keccak256(0x1840, 288))
            hash_mod_store(0x1960, f_q)
mstore(0x19c0, mulmod(mload(0xb80), mload(0xb80), f_q))

        i := 0x19c0
        for { let j := add(i, 0x20) } lt(j, 0x1ac0) { i := j j := add(j, 0x20) } {
            mstore(j, mulmod(mload(i), mload(i), f_q))
        }

mstore(0x1ac0, addmod(mload(0x1aa0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1ae0, mulmod(mload(0x1ac0), 21802741923121153053409505722814863857733722351976909209543133076471996743681, f_q))
mstore(0x1b00, mulmod(mload(0x1ae0), 10167250710514084151592399827148084713285735496006016499965216114801401041468, f_q))
mstore(0x1b20, addmod(mload(0xb80), 11720992161325191070654005918109190375262628904410017843732988071774407454149, f_q))
mstore(0x1b40, mulmod(mload(0x1ae0), 15620430616972136973029697708057142747056669543503469918700292712864029815878, f_q))
mstore(0x1b60, addmod(mload(0xb80), 6267812254867138249216708037200132341491694856912564424997911473711778679739, f_q))
mstore(0x1b80, mulmod(mload(0x1ae0), 4658854783519236281304787251426829785380272013053939496434657852755686889074, f_q))
mstore(0x1ba0, addmod(mload(0xb80), 17229388088320038940941618493830445303168092387362094847263546333820121606543, f_q))
mstore(0x1bc0, mulmod(mload(0x1ae0), 11423757818648818765461327411617109120243501240676889555478397529313037714234, f_q))
mstore(0x1be0, addmod(mload(0xb80), 10464485053190456456785078333640165968304863159739144788219806657262770781383, f_q))
mstore(0x1c00, mulmod(mload(0x1ae0), 13677048343952077794467995888380402608453928821079198134318291065290235358859, f_q))
mstore(0x1c20, addmod(mload(0xb80), 8211194527887197427778409856876872480094435579336836209379913121285573136758, f_q))
mstore(0x1c40, mulmod(mload(0x1ae0), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))
mstore(0x1c60, addmod(mload(0xb80), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))
mstore(0x1c80, mulmod(mload(0x1ae0), 1, f_q))
mstore(0x1ca0, addmod(mload(0xb80), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1cc0, mulmod(mload(0x1ae0), 7393649265675507591155086225434297871937368251641985215568891852805958167681, f_q))
mstore(0x1ce0, addmod(mload(0xb80), 14494593606163767631091319519822977216610996148774049128129312333769850327936, f_q))
mstore(0x1d00, mulmod(mload(0x1ae0), 18154240498369470423574571952998640420834620155273666494480695920805672807787, f_q))
mstore(0x1d20, addmod(mload(0xb80), 3734002373469804798671833792258634667713744245142367849217508265770135687830, f_q))
mstore(0x1d40, mulmod(mload(0x1ae0), 11155988749590188555567104370587191404739761262261394640056258000903015121241, f_q))
mstore(0x1d60, addmod(mload(0xb80), 10732254122249086666679301374670083683808603138154639703641946185672793374376, f_q))
{
            let prod := mload(0x1b20)

                prod := mulmod(mload(0x1b60), prod, f_q)
                mstore(0x1d80, prod)
            
                prod := mulmod(mload(0x1ba0), prod, f_q)
                mstore(0x1da0, prod)
            
                prod := mulmod(mload(0x1be0), prod, f_q)
                mstore(0x1dc0, prod)
            
                prod := mulmod(mload(0x1c20), prod, f_q)
                mstore(0x1de0, prod)
            
                prod := mulmod(mload(0x1c60), prod, f_q)
                mstore(0x1e00, prod)
            
                prod := mulmod(mload(0x1ca0), prod, f_q)
                mstore(0x1e20, prod)
            
                prod := mulmod(mload(0x1ce0), prod, f_q)
                mstore(0x1e40, prod)
            
                prod := mulmod(mload(0x1d20), prod, f_q)
                mstore(0x1e60, prod)
            
                prod := mulmod(mload(0x1d60), prod, f_q)
                mstore(0x1e80, prod)
            
                prod := mulmod(mload(0x1ac0), prod, f_q)
                mstore(0x1ea0, prod)
            
        }
mstore(0x1ee0, 32)
mstore(0x1f00, 32)
mstore(0x1f20, 32)
mstore(0x1f40, mload(0x1ea0))
mstore(0x1f60, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1f80, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1ee0, 0xc0, 0x1ec0, 0x20), 1), success)
{
            
            let inv := mload(0x1ec0)
            let v
        
                    v := mload(0x1ac0)
                    mstore(6848, mulmod(mload(0x1e80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1d60)
                    mstore(7520, mulmod(mload(0x1e60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1d20)
                    mstore(7456, mulmod(mload(0x1e40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ce0)
                    mstore(7392, mulmod(mload(0x1e20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ca0)
                    mstore(7328, mulmod(mload(0x1e00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1c60)
                    mstore(7264, mulmod(mload(0x1de0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1c20)
                    mstore(7200, mulmod(mload(0x1dc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1be0)
                    mstore(7136, mulmod(mload(0x1da0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ba0)
                    mstore(7072, mulmod(mload(0x1d80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1b60)
                    mstore(7008, mulmod(mload(0x1b20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x1b20, inv)

        }
mstore(0x1fa0, mulmod(mload(0x1b00), mload(0x1b20), f_q))
mstore(0x1fc0, mulmod(mload(0x1b40), mload(0x1b60), f_q))
mstore(0x1fe0, mulmod(mload(0x1b80), mload(0x1ba0), f_q))
mstore(0x2000, mulmod(mload(0x1bc0), mload(0x1be0), f_q))
mstore(0x2020, mulmod(mload(0x1c00), mload(0x1c20), f_q))
mstore(0x2040, mulmod(mload(0x1c40), mload(0x1c60), f_q))
mstore(0x2060, mulmod(mload(0x1c80), mload(0x1ca0), f_q))
mstore(0x2080, mulmod(mload(0x1cc0), mload(0x1ce0), f_q))
mstore(0x20a0, mulmod(mload(0x1d00), mload(0x1d20), f_q))
mstore(0x20c0, mulmod(mload(0x1d40), mload(0x1d60), f_q))
{
            let result := mulmod(mload(0x2060), mload(0xa0), f_q)
result := addmod(mulmod(mload(0x2080), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x20a0), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x20c0), mload(0x100), f_q), result, f_q)
mstore(8416, result)
        }
mstore(0x2100, addmod(mload(0xbc0), mload(0xbe0), f_q))
mstore(0x2120, addmod(mload(0x2100), sub(f_q, mload(0xc00)), f_q))
mstore(0x2140, mulmod(mload(0x2120), mload(0x1080), f_q))
mstore(0x2160, mulmod(mload(0x9e0), mload(0x2140), f_q))
mstore(0x2180, addmod(mload(0xcc0), mload(0xc20), f_q))
mstore(0x21a0, addmod(mload(0xd60), sub(f_q, mload(0x2180)), f_q))
mstore(0x21c0, mulmod(mload(0x21a0), mload(0x10a0), f_q))
mstore(0x21e0, addmod(mload(0x2160), mload(0x21c0), f_q))
mstore(0x2200, mulmod(mload(0x9e0), mload(0x21e0), f_q))
mstore(0x2220, addmod(mload(0xce0), mload(0xc40), f_q))
mstore(0x2240, addmod(mload(0xd80), sub(f_q, mload(0x2220)), f_q))
mstore(0x2260, mulmod(mload(0x2240), mload(0x10a0), f_q))
mstore(0x2280, addmod(mload(0x2200), mload(0x2260), f_q))
mstore(0x22a0, mulmod(mload(0x9e0), mload(0x2280), f_q))
mstore(0x22c0, addmod(mload(0xd00), mload(0xc60), f_q))
mstore(0x22e0, addmod(mload(0xda0), sub(f_q, mload(0x22c0)), f_q))
mstore(0x2300, mulmod(mload(0x22e0), mload(0x10a0), f_q))
mstore(0x2320, addmod(mload(0x22a0), mload(0x2300), f_q))
mstore(0x2340, mulmod(mload(0x9e0), mload(0x2320), f_q))
mstore(0x2360, addmod(mload(0xd20), mload(0xc80), f_q))
mstore(0x2380, addmod(mload(0xdc0), sub(f_q, mload(0x2360)), f_q))
mstore(0x23a0, mulmod(mload(0x2380), mload(0x10a0), f_q))
mstore(0x23c0, addmod(mload(0x2340), mload(0x23a0), f_q))
mstore(0x23e0, mulmod(mload(0x9e0), mload(0x23c0), f_q))
mstore(0x2400, addmod(mload(0xd40), mload(0xca0), f_q))
mstore(0x2420, addmod(mload(0xde0), sub(f_q, mload(0x2400)), f_q))
mstore(0x2440, mulmod(mload(0x2420), mload(0x10a0), f_q))
mstore(0x2460, addmod(mload(0x23e0), mload(0x2440), f_q))
mstore(0x2480, mulmod(mload(0x9e0), mload(0x2460), f_q))
mstore(0x24a0, addmod(mload(0xc20), mload(0xf40), f_q))
mstore(0x24c0, mulmod(mload(0x24a0), mload(0x24a0), f_q))
mstore(0x24e0, mulmod(mload(0x24c0), mload(0x24c0), f_q))
mstore(0x2500, mulmod(mload(0x24a0), mload(0x24e0), f_q))
mstore(0x2520, mulmod(mload(0x2500), 16789463359527776692258765063233607350971630674230623383979223533600140787105, f_q))
mstore(0x2540, addmod(0, mload(0x2520), f_q))
mstore(0x2560, addmod(mload(0xc40), mload(0xf60), f_q))
mstore(0x2580, mulmod(mload(0x2560), 17179611066821656668705197789232102741366879862607190942874777813024566441829, f_q))
mstore(0x25a0, addmod(mload(0x2540), mload(0x2580), f_q))
mstore(0x25c0, addmod(mload(0xc60), mload(0xf80), f_q))
mstore(0x25e0, mulmod(mload(0x25c0), 18653277315487164762584377009009109585010878033606596417396490909822722930739, f_q))
mstore(0x2600, addmod(mload(0x25a0), mload(0x25e0), f_q))
mstore(0x2620, addmod(mload(0xc80), mload(0xfa0), f_q))
mstore(0x2640, mulmod(mload(0x2620), 7373070639853668650581790286343199505413793790160702463077019294817051722180, f_q))
mstore(0x2660, addmod(mload(0x2600), mload(0x2640), f_q))
mstore(0x2680, addmod(mload(0xca0), mload(0xfc0), f_q))
mstore(0x26a0, mulmod(mload(0x2680), 4823864393442908763804841692709014014130031798360007432734996408628916373879, f_q))
mstore(0x26c0, addmod(mload(0x2660), mload(0x26a0), f_q))
mstore(0x26e0, addmod(mload(0x26c0), sub(f_q, mload(0xea0)), f_q))
mstore(0x2700, mulmod(mload(0x26e0), mload(0x10c0), f_q))
mstore(0x2720, addmod(mload(0x2480), mload(0x2700), f_q))
mstore(0x2740, mulmod(mload(0x9e0), mload(0x2720), f_q))
mstore(0x2760, mulmod(mload(0x2500), 19196309854577132760746782449135315310664418272926255500908899397538686486585, f_q))
mstore(0x2780, addmod(0, mload(0x2760), f_q))
mstore(0x27a0, mulmod(mload(0x2560), 18123132816088485879885148351452823314623055244145916622592591084094232513914, f_q))
mstore(0x27c0, addmod(mload(0x2780), mload(0x27a0), f_q))
mstore(0x27e0, mulmod(mload(0x25c0), 18436594886553181913092702411547018228276047601279727265790147051821171174455, f_q))
mstore(0x2800, addmod(mload(0x27c0), mload(0x27e0), f_q))
mstore(0x2820, mulmod(mload(0x2620), 15167500404313194506503404655898040457721633218143681920692711693000769735187, f_q))
mstore(0x2840, addmod(mload(0x2800), mload(0x2820), f_q))
mstore(0x2860, mulmod(mload(0x2680), 9437986152015460505719924283993842205604222075968464846270136901243896809793, f_q))
mstore(0x2880, addmod(mload(0x2840), mload(0x2860), f_q))
mstore(0x28a0, addmod(mload(0x2880), sub(f_q, mload(0xec0)), f_q))
mstore(0x28c0, mulmod(mload(0x28a0), mload(0x10c0), f_q))
mstore(0x28e0, addmod(mload(0x2740), mload(0x28c0), f_q))
mstore(0x2900, mulmod(mload(0x9e0), mload(0x28e0), f_q))
mstore(0x2920, mulmod(mload(0x2500), 21445376105821232747280055223032050399373725161014449207033808524504027971613, f_q))
mstore(0x2940, addmod(0, mload(0x2920), f_q))
mstore(0x2960, mulmod(mload(0x2560), 49684738714301073369749035791061182456037935161360748355432247732088942674, f_q))
mstore(0x2980, addmod(mload(0x2940), mload(0x2960), f_q))
mstore(0x29a0, mulmod(mload(0x25c0), 9826409059947591908303145327284336313371973037536805760095514429930589897515, f_q))
mstore(0x29c0, addmod(mload(0x2980), mload(0x29a0), f_q))
mstore(0x29e0, mulmod(mload(0x2620), 8494798325496773219358794086647759478982958403252584257436898618394561204124, f_q))
mstore(0x2a00, addmod(mload(0x29c0), mload(0x29e0), f_q))
mstore(0x2a20, mulmod(mload(0x2680), 21251937175072447337747316555423152807036003235223125066270735279039060889959, f_q))
mstore(0x2a40, addmod(mload(0x2a00), mload(0x2a20), f_q))
mstore(0x2a60, addmod(mload(0x2a40), sub(f_q, mload(0xee0)), f_q))
mstore(0x2a80, mulmod(mload(0x2a60), mload(0x10c0), f_q))
mstore(0x2aa0, addmod(mload(0x2900), mload(0x2a80), f_q))
mstore(0x2ac0, mulmod(mload(0x9e0), mload(0x2aa0), f_q))
mstore(0x2ae0, mulmod(mload(0x2500), 5539100337780919206842837176908516952801756637410959104376645017856664270896, f_q))
mstore(0x2b00, addmod(0, mload(0x2ae0), f_q))
mstore(0x2b20, mulmod(mload(0x2560), 6297628909516159190915174165284309160976659474973668336571577778869958189934, f_q))
mstore(0x2b40, addmod(mload(0x2b00), mload(0x2b20), f_q))
mstore(0x2b60, mulmod(mload(0x25c0), 12792263637464508665199868777503118105486490400267592501708855807938962470650, f_q))
mstore(0x2b80, addmod(mload(0x2b40), mload(0x2b60), f_q))
mstore(0x2ba0, mulmod(mload(0x2620), 17254685306085558791725544672172906900581495686070720065168939143671412445514, f_q))
mstore(0x2bc0, addmod(mload(0x2b80), mload(0x2ba0), f_q))
mstore(0x2be0, mulmod(mload(0x2680), 3590396502942934679818900672232030233017710909687947858184099000783280809247, f_q))
mstore(0x2c00, addmod(mload(0x2bc0), mload(0x2be0), f_q))
mstore(0x2c20, addmod(mload(0x2c00), sub(f_q, mload(0xf00)), f_q))
mstore(0x2c40, mulmod(mload(0x2c20), mload(0x10c0), f_q))
mstore(0x2c60, addmod(mload(0x2ac0), mload(0x2c40), f_q))
mstore(0x2c80, mulmod(mload(0x9e0), mload(0x2c60), f_q))
mstore(0x2ca0, mulmod(mload(0x2500), 19055249881366445073616526879263250763682650596233071589085239500077496415637, f_q))
mstore(0x2cc0, addmod(0, mload(0x2ca0), f_q))
mstore(0x2ce0, mulmod(mload(0x2560), 7367697936402141224946246030743627391716576575953707640061577218995381577033, f_q))
mstore(0x2d00, addmod(mload(0x2cc0), mload(0x2ce0), f_q))
mstore(0x2d20, mulmod(mload(0x25c0), 1322791522030759131093883057746095061798181102708855007233180025036972924046, f_q))
mstore(0x2d40, addmod(mload(0x2d00), mload(0x2d20), f_q))
mstore(0x2d60, mulmod(mload(0x2620), 20456741074925985565499300081580917471340328842103779922028754640077047587707, f_q))
mstore(0x2d80, addmod(mload(0x2d40), mload(0x2d60), f_q))
mstore(0x2da0, mulmod(mload(0x2680), 9059147312071680695674575245237100802111605600478121517359780850134328696420, f_q))
mstore(0x2dc0, addmod(mload(0x2d80), mload(0x2da0), f_q))
mstore(0x2de0, addmod(mload(0x2dc0), sub(f_q, mload(0xf20)), f_q))
mstore(0x2e00, mulmod(mload(0x2de0), mload(0x10c0), f_q))
mstore(0x2e20, addmod(mload(0x2c80), mload(0x2e00), f_q))
mstore(0x2e40, mulmod(mload(0x9e0), mload(0x2e20), f_q))
mstore(0x2e60, mulmod(mload(0x2560), mload(0x2560), f_q))
mstore(0x2e80, mulmod(mload(0x2e60), mload(0x2e60), f_q))
mstore(0x2ea0, mulmod(mload(0x2560), mload(0x2e80), f_q))
mstore(0x2ec0, mulmod(mload(0x2ea0), 17179611066821656668705197789232102741366879862607190942874777813024566441829, f_q))
mstore(0x2ee0, addmod(mload(0x2540), mload(0x2ec0), f_q))
mstore(0x2f00, mulmod(mload(0x25c0), mload(0x25c0), f_q))
mstore(0x2f20, mulmod(mload(0x2f00), mload(0x2f00), f_q))
mstore(0x2f40, mulmod(mload(0x25c0), mload(0x2f20), f_q))
mstore(0x2f60, mulmod(mload(0x2f40), 18653277315487164762584377009009109585010878033606596417396490909822722930739, f_q))
mstore(0x2f80, addmod(mload(0x2ee0), mload(0x2f60), f_q))
mstore(0x2fa0, mulmod(mload(0x2620), mload(0x2620), f_q))
mstore(0x2fc0, mulmod(mload(0x2fa0), mload(0x2fa0), f_q))
mstore(0x2fe0, mulmod(mload(0x2620), mload(0x2fc0), f_q))
mstore(0x3000, mulmod(mload(0x2fe0), 7373070639853668650581790286343199505413793790160702463077019294817051722180, f_q))
mstore(0x3020, addmod(mload(0x2f80), mload(0x3000), f_q))
mstore(0x3040, mulmod(mload(0x2680), mload(0x2680), f_q))
mstore(0x3060, mulmod(mload(0x3040), mload(0x3040), f_q))
mstore(0x3080, mulmod(mload(0x2680), mload(0x3060), f_q))
mstore(0x30a0, mulmod(mload(0x3080), 4823864393442908763804841692709014014130031798360007432734996408628916373879, f_q))
mstore(0x30c0, addmod(mload(0x3020), mload(0x30a0), f_q))
mstore(0x30e0, addmod(mload(0x30c0), sub(f_q, mload(0xea0)), f_q))
mstore(0x3100, mulmod(mload(0x30e0), mload(0x10e0), f_q))
mstore(0x3120, addmod(mload(0x2e40), mload(0x3100), f_q))
mstore(0x3140, mulmod(mload(0x9e0), mload(0x3120), f_q))
mstore(0x3160, mulmod(mload(0x2ea0), 18123132816088485879885148351452823314623055244145916622592591084094232513914, f_q))
mstore(0x3180, addmod(mload(0x2780), mload(0x3160), f_q))
mstore(0x31a0, mulmod(mload(0x2f40), 18436594886553181913092702411547018228276047601279727265790147051821171174455, f_q))
mstore(0x31c0, addmod(mload(0x3180), mload(0x31a0), f_q))
mstore(0x31e0, mulmod(mload(0x2fe0), 15167500404313194506503404655898040457721633218143681920692711693000769735187, f_q))
mstore(0x3200, addmod(mload(0x31c0), mload(0x31e0), f_q))
mstore(0x3220, mulmod(mload(0x3080), 9437986152015460505719924283993842205604222075968464846270136901243896809793, f_q))
mstore(0x3240, addmod(mload(0x3200), mload(0x3220), f_q))
mstore(0x3260, addmod(mload(0x3240), sub(f_q, mload(0xec0)), f_q))
mstore(0x3280, mulmod(mload(0x3260), mload(0x10e0), f_q))
mstore(0x32a0, addmod(mload(0x3140), mload(0x3280), f_q))
mstore(0x32c0, mulmod(mload(0x9e0), mload(0x32a0), f_q))
mstore(0x32e0, mulmod(mload(0x2ea0), 49684738714301073369749035791061182456037935161360748355432247732088942674, f_q))
mstore(0x3300, addmod(mload(0x2940), mload(0x32e0), f_q))
mstore(0x3320, mulmod(mload(0x2f40), 9826409059947591908303145327284336313371973037536805760095514429930589897515, f_q))
mstore(0x3340, addmod(mload(0x3300), mload(0x3320), f_q))
mstore(0x3360, mulmod(mload(0x2fe0), 8494798325496773219358794086647759478982958403252584257436898618394561204124, f_q))
mstore(0x3380, addmod(mload(0x3340), mload(0x3360), f_q))
mstore(0x33a0, mulmod(mload(0x3080), 21251937175072447337747316555423152807036003235223125066270735279039060889959, f_q))
mstore(0x33c0, addmod(mload(0x3380), mload(0x33a0), f_q))
mstore(0x33e0, addmod(mload(0x33c0), sub(f_q, mload(0xee0)), f_q))
mstore(0x3400, mulmod(mload(0x33e0), mload(0x10e0), f_q))
mstore(0x3420, addmod(mload(0x32c0), mload(0x3400), f_q))
mstore(0x3440, mulmod(mload(0x9e0), mload(0x3420), f_q))
mstore(0x3460, mulmod(mload(0x2ea0), 6297628909516159190915174165284309160976659474973668336571577778869958189934, f_q))
mstore(0x3480, addmod(mload(0x2b00), mload(0x3460), f_q))
mstore(0x34a0, mulmod(mload(0x2f40), 12792263637464508665199868777503118105486490400267592501708855807938962470650, f_q))
mstore(0x34c0, addmod(mload(0x3480), mload(0x34a0), f_q))
mstore(0x34e0, mulmod(mload(0x2fe0), 17254685306085558791725544672172906900581495686070720065168939143671412445514, f_q))
mstore(0x3500, addmod(mload(0x34c0), mload(0x34e0), f_q))
mstore(0x3520, mulmod(mload(0x3080), 3590396502942934679818900672232030233017710909687947858184099000783280809247, f_q))
mstore(0x3540, addmod(mload(0x3500), mload(0x3520), f_q))
mstore(0x3560, addmod(mload(0x3540), sub(f_q, mload(0xf00)), f_q))
mstore(0x3580, mulmod(mload(0x3560), mload(0x10e0), f_q))
mstore(0x35a0, addmod(mload(0x3440), mload(0x3580), f_q))
mstore(0x35c0, mulmod(mload(0x9e0), mload(0x35a0), f_q))
mstore(0x35e0, mulmod(mload(0x2ea0), 7367697936402141224946246030743627391716576575953707640061577218995381577033, f_q))
mstore(0x3600, addmod(mload(0x2cc0), mload(0x35e0), f_q))
mstore(0x3620, mulmod(mload(0x2f40), 1322791522030759131093883057746095061798181102708855007233180025036972924046, f_q))
mstore(0x3640, addmod(mload(0x3600), mload(0x3620), f_q))
mstore(0x3660, mulmod(mload(0x2fe0), 20456741074925985565499300081580917471340328842103779922028754640077047587707, f_q))
mstore(0x3680, addmod(mload(0x3640), mload(0x3660), f_q))
mstore(0x36a0, mulmod(mload(0x3080), 9059147312071680695674575245237100802111605600478121517359780850134328696420, f_q))
mstore(0x36c0, addmod(mload(0x3680), mload(0x36a0), f_q))
mstore(0x36e0, addmod(mload(0x36c0), sub(f_q, mload(0xf20)), f_q))
mstore(0x3700, mulmod(mload(0x36e0), mload(0x10e0), f_q))
mstore(0x3720, addmod(mload(0x35c0), mload(0x3700), f_q))
mstore(0x3740, mulmod(mload(0x9e0), mload(0x3720), f_q))
mstore(0x3760, addmod(1, sub(f_q, mload(0x1520)), f_q))
mstore(0x3780, mulmod(mload(0x3760), mload(0x2060), f_q))
mstore(0x37a0, addmod(mload(0x3740), mload(0x3780), f_q))
mstore(0x37c0, mulmod(mload(0x9e0), mload(0x37a0), f_q))
mstore(0x37e0, mulmod(mload(0x17c0), mload(0x17c0), f_q))
mstore(0x3800, addmod(mload(0x37e0), sub(f_q, mload(0x17c0)), f_q))
mstore(0x3820, mulmod(mload(0x3800), mload(0x1fa0), f_q))
mstore(0x3840, addmod(mload(0x37c0), mload(0x3820), f_q))
mstore(0x3860, mulmod(mload(0x9e0), mload(0x3840), f_q))
mstore(0x3880, addmod(mload(0x1580), sub(f_q, mload(0x1560)), f_q))
mstore(0x38a0, mulmod(mload(0x3880), mload(0x2060), f_q))
mstore(0x38c0, addmod(mload(0x3860), mload(0x38a0), f_q))
mstore(0x38e0, mulmod(mload(0x9e0), mload(0x38c0), f_q))
mstore(0x3900, addmod(mload(0x15e0), sub(f_q, mload(0x15c0)), f_q))
mstore(0x3920, mulmod(mload(0x3900), mload(0x2060), f_q))
mstore(0x3940, addmod(mload(0x38e0), mload(0x3920), f_q))
mstore(0x3960, mulmod(mload(0x9e0), mload(0x3940), f_q))
mstore(0x3980, addmod(mload(0x1640), sub(f_q, mload(0x1620)), f_q))
mstore(0x39a0, mulmod(mload(0x3980), mload(0x2060), f_q))
mstore(0x39c0, addmod(mload(0x3960), mload(0x39a0), f_q))
mstore(0x39e0, mulmod(mload(0x9e0), mload(0x39c0), f_q))
mstore(0x3a00, addmod(mload(0x16a0), sub(f_q, mload(0x1680)), f_q))
mstore(0x3a20, mulmod(mload(0x3a00), mload(0x2060), f_q))
mstore(0x3a40, addmod(mload(0x39e0), mload(0x3a20), f_q))
mstore(0x3a60, mulmod(mload(0x9e0), mload(0x3a40), f_q))
mstore(0x3a80, addmod(mload(0x1700), sub(f_q, mload(0x16e0)), f_q))
mstore(0x3aa0, mulmod(mload(0x3a80), mload(0x2060), f_q))
mstore(0x3ac0, addmod(mload(0x3a60), mload(0x3aa0), f_q))
mstore(0x3ae0, mulmod(mload(0x9e0), mload(0x3ac0), f_q))
mstore(0x3b00, addmod(mload(0x1760), sub(f_q, mload(0x1740)), f_q))
mstore(0x3b20, mulmod(mload(0x3b00), mload(0x2060), f_q))
mstore(0x3b40, addmod(mload(0x3ae0), mload(0x3b20), f_q))
mstore(0x3b60, mulmod(mload(0x9e0), mload(0x3b40), f_q))
mstore(0x3b80, addmod(mload(0x17c0), sub(f_q, mload(0x17a0)), f_q))
mstore(0x3ba0, mulmod(mload(0x3b80), mload(0x2060), f_q))
mstore(0x3bc0, addmod(mload(0x3b60), mload(0x3ba0), f_q))
mstore(0x3be0, mulmod(mload(0x9e0), mload(0x3bc0), f_q))
mstore(0x3c00, addmod(1, sub(f_q, mload(0x1fa0)), f_q))
mstore(0x3c20, addmod(mload(0x1fc0), mload(0x1fe0), f_q))
mstore(0x3c40, addmod(mload(0x3c20), mload(0x2000), f_q))
mstore(0x3c60, addmod(mload(0x3c40), mload(0x2020), f_q))
mstore(0x3c80, addmod(mload(0x3c60), mload(0x2040), f_q))
mstore(0x3ca0, addmod(mload(0x3c00), sub(f_q, mload(0x3c80)), f_q))
mstore(0x3cc0, mulmod(mload(0x1120), mload(0x6e0), f_q))
mstore(0x3ce0, addmod(mload(0xbc0), mload(0x3cc0), f_q))
mstore(0x3d00, addmod(mload(0x3ce0), mload(0x740), f_q))
mstore(0x3d20, mulmod(mload(0x1140), mload(0x6e0), f_q))
mstore(0x3d40, addmod(mload(0xc20), mload(0x3d20), f_q))
mstore(0x3d60, addmod(mload(0x3d40), mload(0x740), f_q))
mstore(0x3d80, mulmod(mload(0x3d60), mload(0x3d00), f_q))
mstore(0x3da0, mulmod(mload(0x1160), mload(0x6e0), f_q))
mstore(0x3dc0, addmod(mload(0xc40), mload(0x3da0), f_q))
mstore(0x3de0, addmod(mload(0x3dc0), mload(0x740), f_q))
mstore(0x3e00, mulmod(mload(0x3de0), mload(0x3d80), f_q))
mstore(0x3e20, mulmod(mload(0x1180), mload(0x6e0), f_q))
mstore(0x3e40, addmod(mload(0xc60), mload(0x3e20), f_q))
mstore(0x3e60, addmod(mload(0x3e40), mload(0x740), f_q))
mstore(0x3e80, mulmod(mload(0x3e60), mload(0x3e00), f_q))
mstore(0x3ea0, mulmod(mload(0x3e80), mload(0x1540), f_q))
mstore(0x3ec0, mulmod(1, mload(0x6e0), f_q))
mstore(0x3ee0, mulmod(mload(0xb80), mload(0x3ec0), f_q))
mstore(0x3f00, addmod(mload(0xbc0), mload(0x3ee0), f_q))
mstore(0x3f20, addmod(mload(0x3f00), mload(0x740), f_q))
mstore(0x3f40, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x6e0), f_q))
mstore(0x3f60, mulmod(mload(0xb80), mload(0x3f40), f_q))
mstore(0x3f80, addmod(mload(0xc20), mload(0x3f60), f_q))
mstore(0x3fa0, addmod(mload(0x3f80), mload(0x740), f_q))
mstore(0x3fc0, mulmod(mload(0x3fa0), mload(0x3f20), f_q))
mstore(0x3fe0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x6e0), f_q))
mstore(0x4000, mulmod(mload(0xb80), mload(0x3fe0), f_q))
mstore(0x4020, addmod(mload(0xc40), mload(0x4000), f_q))
mstore(0x4040, addmod(mload(0x4020), mload(0x740), f_q))
mstore(0x4060, mulmod(mload(0x4040), mload(0x3fc0), f_q))
mstore(0x4080, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x6e0), f_q))
mstore(0x40a0, mulmod(mload(0xb80), mload(0x4080), f_q))
mstore(0x40c0, addmod(mload(0xc60), mload(0x40a0), f_q))
mstore(0x40e0, addmod(mload(0x40c0), mload(0x740), f_q))
mstore(0x4100, mulmod(mload(0x40e0), mload(0x4060), f_q))
mstore(0x4120, mulmod(mload(0x4100), mload(0x1520), f_q))
mstore(0x4140, addmod(mload(0x3ea0), sub(f_q, mload(0x4120)), f_q))
mstore(0x4160, mulmod(mload(0x4140), mload(0x3ca0), f_q))
mstore(0x4180, addmod(mload(0x3be0), mload(0x4160), f_q))
mstore(0x41a0, mulmod(mload(0x9e0), mload(0x4180), f_q))
mstore(0x41c0, mulmod(mload(0x11a0), mload(0x6e0), f_q))
mstore(0x41e0, addmod(mload(0xc80), mload(0x41c0), f_q))
mstore(0x4200, addmod(mload(0x41e0), mload(0x740), f_q))
mstore(0x4220, mulmod(mload(0x11c0), mload(0x6e0), f_q))
mstore(0x4240, addmod(mload(0xca0), mload(0x4220), f_q))
mstore(0x4260, addmod(mload(0x4240), mload(0x740), f_q))
mstore(0x4280, mulmod(mload(0x4260), mload(0x4200), f_q))
mstore(0x42a0, mulmod(mload(0x11e0), mload(0x6e0), f_q))
mstore(0x42c0, addmod(mload(0xcc0), mload(0x42a0), f_q))
mstore(0x42e0, addmod(mload(0x42c0), mload(0x740), f_q))
mstore(0x4300, mulmod(mload(0x42e0), mload(0x4280), f_q))
mstore(0x4320, mulmod(mload(0x1200), mload(0x6e0), f_q))
mstore(0x4340, addmod(mload(0xce0), mload(0x4320), f_q))
mstore(0x4360, addmod(mload(0x4340), mload(0x740), f_q))
mstore(0x4380, mulmod(mload(0x4360), mload(0x4300), f_q))
mstore(0x43a0, mulmod(mload(0x4380), mload(0x15a0), f_q))
mstore(0x43c0, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x6e0), f_q))
mstore(0x43e0, mulmod(mload(0xb80), mload(0x43c0), f_q))
mstore(0x4400, addmod(mload(0xc80), mload(0x43e0), f_q))
mstore(0x4420, addmod(mload(0x4400), mload(0x740), f_q))
mstore(0x4440, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x6e0), f_q))
mstore(0x4460, mulmod(mload(0xb80), mload(0x4440), f_q))
mstore(0x4480, addmod(mload(0xca0), mload(0x4460), f_q))
mstore(0x44a0, addmod(mload(0x4480), mload(0x740), f_q))
mstore(0x44c0, mulmod(mload(0x44a0), mload(0x4420), f_q))
mstore(0x44e0, mulmod(5625741653535312224677218588085279924365897425605943700675464992185016992283, mload(0x6e0), f_q))
mstore(0x4500, mulmod(mload(0xb80), mload(0x44e0), f_q))
mstore(0x4520, addmod(mload(0xcc0), mload(0x4500), f_q))
mstore(0x4540, addmod(mload(0x4520), mload(0x740), f_q))
mstore(0x4560, mulmod(mload(0x4540), mload(0x44c0), f_q))
mstore(0x4580, mulmod(14704729814417906439424896605881467874595262020190401576785074330126828718155, mload(0x6e0), f_q))
mstore(0x45a0, mulmod(mload(0xb80), mload(0x4580), f_q))
mstore(0x45c0, addmod(mload(0xce0), mload(0x45a0), f_q))
mstore(0x45e0, addmod(mload(0x45c0), mload(0x740), f_q))
mstore(0x4600, mulmod(mload(0x45e0), mload(0x4560), f_q))
mstore(0x4620, mulmod(mload(0x4600), mload(0x1580), f_q))
mstore(0x4640, addmod(mload(0x43a0), sub(f_q, mload(0x4620)), f_q))
mstore(0x4660, mulmod(mload(0x4640), mload(0x3ca0), f_q))
mstore(0x4680, addmod(mload(0x41a0), mload(0x4660), f_q))
mstore(0x46a0, mulmod(mload(0x9e0), mload(0x4680), f_q))
mstore(0x46c0, mulmod(mload(0x1220), mload(0x6e0), f_q))
mstore(0x46e0, addmod(mload(0xd00), mload(0x46c0), f_q))
mstore(0x4700, addmod(mload(0x46e0), mload(0x740), f_q))
mstore(0x4720, mulmod(mload(0x1240), mload(0x6e0), f_q))
mstore(0x4740, addmod(mload(0xd20), mload(0x4720), f_q))
mstore(0x4760, addmod(mload(0x4740), mload(0x740), f_q))
mstore(0x4780, mulmod(mload(0x4760), mload(0x4700), f_q))
mstore(0x47a0, mulmod(mload(0x1260), mload(0x6e0), f_q))
mstore(0x47c0, addmod(mload(0xd40), mload(0x47a0), f_q))
mstore(0x47e0, addmod(mload(0x47c0), mload(0x740), f_q))
mstore(0x4800, mulmod(mload(0x47e0), mload(0x4780), f_q))
mstore(0x4820, mulmod(mload(0x1280), mload(0x6e0), f_q))
mstore(0x4840, addmod(mload(0xd60), mload(0x4820), f_q))
mstore(0x4860, addmod(mload(0x4840), mload(0x740), f_q))
mstore(0x4880, mulmod(mload(0x4860), mload(0x4800), f_q))
mstore(0x48a0, mulmod(mload(0x4880), mload(0x1600), f_q))
mstore(0x48c0, mulmod(8343274462013750416000956870576256937330525306073862550863787263304548803879, mload(0x6e0), f_q))
mstore(0x48e0, mulmod(mload(0xb80), mload(0x48c0), f_q))
mstore(0x4900, addmod(mload(0xd00), mload(0x48e0), f_q))
mstore(0x4920, addmod(mload(0x4900), mload(0x740), f_q))
mstore(0x4940, mulmod(20928372310071051017340352686640453451620397549739756658327314209761852842004, mload(0x6e0), f_q))
mstore(0x4960, mulmod(mload(0xb80), mload(0x4940), f_q))
mstore(0x4980, addmod(mload(0xd20), mload(0x4960), f_q))
mstore(0x49a0, addmod(mload(0x4980), mload(0x740), f_q))
mstore(0x49c0, mulmod(mload(0x49a0), mload(0x4920), f_q))
mstore(0x49e0, mulmod(15845651941796975697993789271154426079663327509658641548785793587449119139335, mload(0x6e0), f_q))
mstore(0x4a00, mulmod(mload(0xb80), mload(0x49e0), f_q))
mstore(0x4a20, addmod(mload(0xd40), mload(0x4a00), f_q))
mstore(0x4a40, addmod(mload(0x4a20), mload(0x740), f_q))
mstore(0x4a60, mulmod(mload(0x4a40), mload(0x49c0), f_q))
mstore(0x4a80, mulmod(8045145839887181143520022567602912517500076612542816225981084745629998235872, mload(0x6e0), f_q))
mstore(0x4aa0, mulmod(mload(0xb80), mload(0x4a80), f_q))
mstore(0x4ac0, addmod(mload(0xd60), mload(0x4aa0), f_q))
mstore(0x4ae0, addmod(mload(0x4ac0), mload(0x740), f_q))
mstore(0x4b00, mulmod(mload(0x4ae0), mload(0x4a60), f_q))
mstore(0x4b20, mulmod(mload(0x4b00), mload(0x15e0), f_q))
mstore(0x4b40, addmod(mload(0x48a0), sub(f_q, mload(0x4b20)), f_q))
mstore(0x4b60, mulmod(mload(0x4b40), mload(0x3ca0), f_q))
mstore(0x4b80, addmod(mload(0x46a0), mload(0x4b60), f_q))
mstore(0x4ba0, mulmod(mload(0x9e0), mload(0x4b80), f_q))
mstore(0x4bc0, mulmod(mload(0x12a0), mload(0x6e0), f_q))
mstore(0x4be0, addmod(mload(0xd80), mload(0x4bc0), f_q))
mstore(0x4c00, addmod(mload(0x4be0), mload(0x740), f_q))
mstore(0x4c20, mulmod(mload(0x12c0), mload(0x6e0), f_q))
mstore(0x4c40, addmod(mload(0xda0), mload(0x4c20), f_q))
mstore(0x4c60, addmod(mload(0x4c40), mload(0x740), f_q))
mstore(0x4c80, mulmod(mload(0x4c60), mload(0x4c00), f_q))
mstore(0x4ca0, mulmod(mload(0x12e0), mload(0x6e0), f_q))
mstore(0x4cc0, addmod(mload(0xdc0), mload(0x4ca0), f_q))
mstore(0x4ce0, addmod(mload(0x4cc0), mload(0x740), f_q))
mstore(0x4d00, mulmod(mload(0x4ce0), mload(0x4c80), f_q))
mstore(0x4d20, mulmod(mload(0x1300), mload(0x6e0), f_q))
mstore(0x4d40, addmod(mload(0xde0), mload(0x4d20), f_q))
mstore(0x4d60, addmod(mload(0x4d40), mload(0x740), f_q))
mstore(0x4d80, mulmod(mload(0x4d60), mload(0x4d00), f_q))
mstore(0x4da0, mulmod(mload(0x4d80), mload(0x1660), f_q))
mstore(0x4dc0, mulmod(2381670505483685611182091218417223919364072893694444758025506701602682587318, mload(0x6e0), f_q))
mstore(0x4de0, mulmod(mload(0xb80), mload(0x4dc0), f_q))
mstore(0x4e00, addmod(mload(0xd80), mload(0x4de0), f_q))
mstore(0x4e20, addmod(mload(0x4e00), mload(0x740), f_q))
mstore(0x4e40, mulmod(7687930163830757070113631199804839025806810462573557873219800755854393200610, mload(0x6e0), f_q))
mstore(0x4e60, mulmod(mload(0xb80), mload(0x4e40), f_q))
mstore(0x4e80, addmod(mload(0xda0), mload(0x4e60), f_q))
mstore(0x4ea0, addmod(mload(0x4e80), mload(0x740), f_q))
mstore(0x4ec0, mulmod(mload(0x4ea0), mload(0x4e20), f_q))
mstore(0x4ee0, mulmod(18841374007583180662637314443453732245933177918185782718371124070078050062475, mload(0x6e0), f_q))
mstore(0x4f00, mulmod(mload(0xb80), mload(0x4ee0), f_q))
mstore(0x4f20, addmod(mload(0xdc0), mload(0x4f00), f_q))
mstore(0x4f40, addmod(mload(0x4f20), mload(0x740), f_q))
mstore(0x4f60, mulmod(mload(0x4f40), mload(0x4ec0), f_q))
mstore(0x4f80, mulmod(19197752132381552471349846071531569266256022960372343424487157777415058628365, mload(0x6e0), f_q))
mstore(0x4fa0, mulmod(mload(0xb80), mload(0x4f80), f_q))
mstore(0x4fc0, addmod(mload(0xde0), mload(0x4fa0), f_q))
mstore(0x4fe0, addmod(mload(0x4fc0), mload(0x740), f_q))
mstore(0x5000, mulmod(mload(0x4fe0), mload(0x4f60), f_q))
mstore(0x5020, mulmod(mload(0x5000), mload(0x1640), f_q))
mstore(0x5040, addmod(mload(0x4da0), sub(f_q, mload(0x5020)), f_q))
mstore(0x5060, mulmod(mload(0x5040), mload(0x3ca0), f_q))
mstore(0x5080, addmod(mload(0x4ba0), mload(0x5060), f_q))
mstore(0x50a0, mulmod(mload(0x9e0), mload(0x5080), f_q))
mstore(0x50c0, mulmod(mload(0x1320), mload(0x6e0), f_q))
mstore(0x50e0, addmod(mload(0xe00), mload(0x50c0), f_q))
mstore(0x5100, addmod(mload(0x50e0), mload(0x740), f_q))
mstore(0x5120, mulmod(mload(0x1340), mload(0x6e0), f_q))
mstore(0x5140, addmod(mload(0xe20), mload(0x5120), f_q))
mstore(0x5160, addmod(mload(0x5140), mload(0x740), f_q))
mstore(0x5180, mulmod(mload(0x5160), mload(0x5100), f_q))
mstore(0x51a0, mulmod(mload(0x1360), mload(0x6e0), f_q))
mstore(0x51c0, addmod(mload(0xe40), mload(0x51a0), f_q))
mstore(0x51e0, addmod(mload(0x51c0), mload(0x740), f_q))
mstore(0x5200, mulmod(mload(0x51e0), mload(0x5180), f_q))
mstore(0x5220, mulmod(mload(0x1380), mload(0x6e0), f_q))
mstore(0x5240, addmod(mload(0xe60), mload(0x5220), f_q))
mstore(0x5260, addmod(mload(0x5240), mload(0x740), f_q))
mstore(0x5280, mulmod(mload(0x5260), mload(0x5200), f_q))
mstore(0x52a0, mulmod(mload(0x5280), mload(0x16c0), f_q))
mstore(0x52c0, mulmod(4107547195958811607586128047858595978395981384383810616480821684720783343476, mload(0x6e0), f_q))
mstore(0x52e0, mulmod(mload(0xb80), mload(0x52c0), f_q))
mstore(0x5300, addmod(mload(0xe00), mload(0x52e0), f_q))
mstore(0x5320, addmod(mload(0x5300), mload(0x740), f_q))
mstore(0x5340, mulmod(13564642984573314542683510780499048133657656300857957395232929436066953511694, mload(0x6e0), f_q))
mstore(0x5360, mulmod(mload(0xb80), mload(0x5340), f_q))
mstore(0x5380, addmod(mload(0xe20), mload(0x5360), f_q))
mstore(0x53a0, addmod(mload(0x5380), mload(0x740), f_q))
mstore(0x53c0, mulmod(mload(0x53a0), mload(0x5320), f_q))
mstore(0x53e0, mulmod(13613576618463984615987010477140414706703336142901358713038085451220811690793, mload(0x6e0), f_q))
mstore(0x5400, mulmod(mload(0xb80), mload(0x53e0), f_q))
mstore(0x5420, addmod(mload(0xe40), mload(0x5400), f_q))
mstore(0x5440, addmod(mload(0x5420), mload(0x740), f_q))
mstore(0x5460, mulmod(mload(0x5440), mload(0x53c0), f_q))
mstore(0x5480, mulmod(9622370733693466968027131946194818623199083572654659861265818790460803870144, mload(0x6e0), f_q))
mstore(0x54a0, mulmod(mload(0xb80), mload(0x5480), f_q))
mstore(0x54c0, addmod(mload(0xe60), mload(0x54a0), f_q))
mstore(0x54e0, addmod(mload(0x54c0), mload(0x740), f_q))
mstore(0x5500, mulmod(mload(0x54e0), mload(0x5460), f_q))
mstore(0x5520, mulmod(mload(0x5500), mload(0x16a0), f_q))
mstore(0x5540, addmod(mload(0x52a0), sub(f_q, mload(0x5520)), f_q))
mstore(0x5560, mulmod(mload(0x5540), mload(0x3ca0), f_q))
mstore(0x5580, addmod(mload(0x50a0), mload(0x5560), f_q))
mstore(0x55a0, mulmod(mload(0x9e0), mload(0x5580), f_q))
mstore(0x55c0, mulmod(mload(0x13a0), mload(0x6e0), f_q))
mstore(0x55e0, addmod(mload(0xe80), mload(0x55c0), f_q))
mstore(0x5600, addmod(mload(0x55e0), mload(0x740), f_q))
mstore(0x5620, mulmod(mload(0x13c0), mload(0x6e0), f_q))
mstore(0x5640, addmod(mload(0xf40), mload(0x5620), f_q))
mstore(0x5660, addmod(mload(0x5640), mload(0x740), f_q))
mstore(0x5680, mulmod(mload(0x5660), mload(0x5600), f_q))
mstore(0x56a0, mulmod(mload(0x13e0), mload(0x6e0), f_q))
mstore(0x56c0, addmod(mload(0xf60), mload(0x56a0), f_q))
mstore(0x56e0, addmod(mload(0x56c0), mload(0x740), f_q))
mstore(0x5700, mulmod(mload(0x56e0), mload(0x5680), f_q))
mstore(0x5720, mulmod(mload(0x1400), mload(0x6e0), f_q))
mstore(0x5740, addmod(mload(0xf80), mload(0x5720), f_q))
mstore(0x5760, addmod(mload(0x5740), mload(0x740), f_q))
mstore(0x5780, mulmod(mload(0x5760), mload(0x5700), f_q))
mstore(0x57a0, mulmod(mload(0x5780), mload(0x1720), f_q))
mstore(0x57c0, mulmod(18626111036309077194167943991502496230251336547212650850189423162939397664427, mload(0x6e0), f_q))
mstore(0x57e0, mulmod(mload(0xb80), mload(0x57c0), f_q))
mstore(0x5800, addmod(mload(0xe80), mload(0x57e0), f_q))
mstore(0x5820, addmod(mload(0x5800), mload(0x740), f_q))
mstore(0x5840, mulmod(18927387919977651356001004808404348904064135541704947183932503905108716786826, mload(0x6e0), f_q))
mstore(0x5860, mulmod(mload(0xb80), mload(0x5840), f_q))
mstore(0x5880, addmod(mload(0xf40), mload(0x5860), f_q))
mstore(0x58a0, addmod(mload(0x5880), mload(0x740), f_q))
mstore(0x58c0, mulmod(mload(0x58a0), mload(0x5820), f_q))
mstore(0x58e0, mulmod(7804796917526052625593875692382519354165159678502462229810454190718346984926, mload(0x6e0), f_q))
mstore(0x5900, mulmod(mload(0xb80), mload(0x58e0), f_q))
mstore(0x5920, addmod(mload(0xf60), mload(0x5900), f_q))
mstore(0x5940, addmod(mload(0x5920), mload(0x740), f_q))
mstore(0x5960, mulmod(mload(0x5940), mload(0x58c0), f_q))
mstore(0x5980, mulmod(3747172222523987354785320406972290682523618221112915484562907750320038756890, mload(0x6e0), f_q))
mstore(0x59a0, mulmod(mload(0xb80), mload(0x5980), f_q))
mstore(0x59c0, addmod(mload(0xf80), mload(0x59a0), f_q))
mstore(0x59e0, addmod(mload(0x59c0), mload(0x740), f_q))
mstore(0x5a00, mulmod(mload(0x59e0), mload(0x5960), f_q))
mstore(0x5a20, mulmod(mload(0x5a00), mload(0x1700), f_q))
mstore(0x5a40, addmod(mload(0x57a0), sub(f_q, mload(0x5a20)), f_q))
mstore(0x5a60, mulmod(mload(0x5a40), mload(0x3ca0), f_q))
mstore(0x5a80, addmod(mload(0x55a0), mload(0x5a60), f_q))
mstore(0x5aa0, mulmod(mload(0x9e0), mload(0x5a80), f_q))
mstore(0x5ac0, mulmod(mload(0x1420), mload(0x6e0), f_q))
mstore(0x5ae0, addmod(mload(0xfa0), mload(0x5ac0), f_q))
mstore(0x5b00, addmod(mload(0x5ae0), mload(0x740), f_q))
mstore(0x5b20, mulmod(mload(0x1440), mload(0x6e0), f_q))
mstore(0x5b40, addmod(mload(0xfc0), mload(0x5b20), f_q))
mstore(0x5b60, addmod(mload(0x5b40), mload(0x740), f_q))
mstore(0x5b80, mulmod(mload(0x5b60), mload(0x5b00), f_q))
mstore(0x5ba0, mulmod(mload(0x1460), mload(0x6e0), f_q))
mstore(0x5bc0, addmod(mload(0xfe0), mload(0x5ba0), f_q))
mstore(0x5be0, addmod(mload(0x5bc0), mload(0x740), f_q))
mstore(0x5c00, mulmod(mload(0x5be0), mload(0x5b80), f_q))
mstore(0x5c20, mulmod(mload(0x1480), mload(0x6e0), f_q))
mstore(0x5c40, addmod(mload(0x1000), mload(0x5c20), f_q))
mstore(0x5c60, addmod(mload(0x5c40), mload(0x740), f_q))
mstore(0x5c80, mulmod(mload(0x5c60), mload(0x5c00), f_q))
mstore(0x5ca0, mulmod(mload(0x5c80), mload(0x1780), f_q))
mstore(0x5cc0, mulmod(3055603373564673109796095879250576820511089880918169704085484833674447711584, mload(0x6e0), f_q))
mstore(0x5ce0, mulmod(mload(0xb80), mload(0x5cc0), f_q))
mstore(0x5d00, addmod(mload(0xfa0), mload(0x5ce0), f_q))
mstore(0x5d20, addmod(mload(0x5d00), mload(0x740), f_q))
mstore(0x5d40, mulmod(18919003022878160460994516395706759933775227444905751459299543520902511916732, mload(0x6e0), f_q))
mstore(0x5d60, mulmod(mload(0xb80), mload(0x5d40), f_q))
mstore(0x5d80, addmod(mload(0xfc0), mload(0x5d60), f_q))
mstore(0x5da0, addmod(mload(0x5d80), mload(0x740), f_q))
mstore(0x5dc0, mulmod(mload(0x5da0), mload(0x5d20), f_q))
mstore(0x5de0, mulmod(21820531317634488286337751998342537049007853262090569269352333717739718892837, mload(0x6e0), f_q))
mstore(0x5e00, mulmod(mload(0xb80), mload(0x5de0), f_q))
mstore(0x5e20, addmod(mload(0xfe0), mload(0x5e00), f_q))
mstore(0x5e40, addmod(mload(0x5e20), mload(0x740), f_q))
mstore(0x5e60, mulmod(mload(0x5e40), mload(0x5dc0), f_q))
mstore(0x5e80, mulmod(11690644161670416005087398779256129545801297842925812006678981443591873164737, mload(0x6e0), f_q))
mstore(0x5ea0, mulmod(mload(0xb80), mload(0x5e80), f_q))
mstore(0x5ec0, addmod(mload(0x1000), mload(0x5ea0), f_q))
mstore(0x5ee0, addmod(mload(0x5ec0), mload(0x740), f_q))
mstore(0x5f00, mulmod(mload(0x5ee0), mload(0x5e60), f_q))
mstore(0x5f20, mulmod(mload(0x5f00), mload(0x1760), f_q))
mstore(0x5f40, addmod(mload(0x5ca0), sub(f_q, mload(0x5f20)), f_q))
mstore(0x5f60, mulmod(mload(0x5f40), mload(0x3ca0), f_q))
mstore(0x5f80, addmod(mload(0x5aa0), mload(0x5f60), f_q))
mstore(0x5fa0, mulmod(mload(0x9e0), mload(0x5f80), f_q))
mstore(0x5fc0, mulmod(mload(0x14a0), mload(0x6e0), f_q))
mstore(0x5fe0, addmod(mload(0x1020), mload(0x5fc0), f_q))
mstore(0x6000, addmod(mload(0x5fe0), mload(0x740), f_q))
mstore(0x6020, mulmod(mload(0x14c0), mload(0x6e0), f_q))
mstore(0x6040, addmod(mload(0x1040), mload(0x6020), f_q))
mstore(0x6060, addmod(mload(0x6040), mload(0x740), f_q))
mstore(0x6080, mulmod(mload(0x6060), mload(0x6000), f_q))
mstore(0x60a0, mulmod(mload(0x14e0), mload(0x6e0), f_q))
mstore(0x60c0, addmod(mload(0x1060), mload(0x60a0), f_q))
mstore(0x60e0, addmod(mload(0x60c0), mload(0x740), f_q))
mstore(0x6100, mulmod(mload(0x60e0), mload(0x6080), f_q))
mstore(0x6120, mulmod(mload(0x1500), mload(0x6e0), f_q))
mstore(0x6140, addmod(mload(0x20e0), mload(0x6120), f_q))
mstore(0x6160, addmod(mload(0x6140), mload(0x740), f_q))
mstore(0x6180, mulmod(mload(0x6160), mload(0x6100), f_q))
mstore(0x61a0, mulmod(mload(0x6180), mload(0x17e0), f_q))
mstore(0x61c0, mulmod(11528161548240682342586611627075998060051606528073876098430287952910212343856, mload(0x6e0), f_q))
mstore(0x61e0, mulmod(mload(0xb80), mload(0x61c0), f_q))
mstore(0x6200, addmod(mload(0x1020), mload(0x61e0), f_q))
mstore(0x6220, addmod(mload(0x6200), mload(0x740), f_q))
mstore(0x6240, mulmod(18628304600034811112233717008028841206682174041476429118387709804684197468805, mload(0x6e0), f_q))
mstore(0x6260, mulmod(mload(0xb80), mload(0x6240), f_q))
mstore(0x6280, addmod(mload(0x1040), mload(0x6260), f_q))
mstore(0x62a0, addmod(mload(0x6280), mload(0x740), f_q))
mstore(0x62c0, mulmod(mload(0x62a0), mload(0x6220), f_q))
mstore(0x62e0, mulmod(3812225076454386035099274274457074170282101128215951730890413789768243087216, mload(0x6e0), f_q))
mstore(0x6300, mulmod(mload(0xb80), mload(0x62e0), f_q))
mstore(0x6320, addmod(mload(0x1060), mload(0x6300), f_q))
mstore(0x6340, addmod(mload(0x6320), mload(0x740), f_q))
mstore(0x6360, mulmod(mload(0x6340), mload(0x62c0), f_q))
mstore(0x6380, mulmod(6086631436731367106067974409738486357173810104979546032479178453565461304432, mload(0x6e0), f_q))
mstore(0x63a0, mulmod(mload(0xb80), mload(0x6380), f_q))
mstore(0x63c0, addmod(mload(0x20e0), mload(0x63a0), f_q))
mstore(0x63e0, addmod(mload(0x63c0), mload(0x740), f_q))
mstore(0x6400, mulmod(mload(0x63e0), mload(0x6360), f_q))
mstore(0x6420, mulmod(mload(0x6400), mload(0x17c0), f_q))
mstore(0x6440, addmod(mload(0x61a0), sub(f_q, mload(0x6420)), f_q))
mstore(0x6460, mulmod(mload(0x6440), mload(0x3ca0), f_q))
mstore(0x6480, addmod(mload(0x5fa0), mload(0x6460), f_q))
mstore(0x64a0, mulmod(mload(0x1aa0), mload(0x1aa0), f_q))
mstore(0x64c0, mulmod(mload(0x64a0), mload(0x1aa0), f_q))
mstore(0x64e0, mulmod(mload(0x64c0), mload(0x1aa0), f_q))
mstore(0x6500, mulmod(mload(0x64e0), mload(0x1aa0), f_q))
mstore(0x6520, mulmod(1, mload(0x1aa0), f_q))
mstore(0x6540, mulmod(1, mload(0x64a0), f_q))
mstore(0x6560, mulmod(1, mload(0x64c0), f_q))
mstore(0x6580, mulmod(1, mload(0x64e0), f_q))
mstore(0x65a0, mulmod(mload(0x6480), mload(0x1ac0), f_q))
mstore(0x65c0, mulmod(mload(0x1980), mload(0x1980), f_q))
mstore(0x65e0, mulmod(mload(0x65c0), mload(0x1980), f_q))
mstore(0x6600, mulmod(mload(0x65e0), mload(0x1980), f_q))
mstore(0x6620, mulmod(mload(0x1820), mload(0x1820), f_q))

    i := 0x6620
    for { let j := add(i, 0x20) } lt(j, 0x6fa0) { i := j j := add(j, 0x20) } {
        mstore(j, mulmod(mload(i), mload(0x1820), f_q))
    }

mstore(0x6fa0, mulmod(sub(f_q, mload(0xbc0)), 1, f_q))
mstore(0x6fc0, mulmod(sub(f_q, mload(0xc20)), mload(0x1820), f_q))
mstore(0x6fe0, mulmod(1, mload(0x1820), f_q))
mstore(0x7000, addmod(mload(0x6fa0), mload(0x6fc0), f_q))
mstore(0x7020, mulmod(sub(f_q, mload(0xc40)), mload(0x6620), f_q))

    i := 0x7040
    let j := 0x6620
    let k := 0x7000
    let l := 0x7020
    let m := 0xc60
    let n := 0x6640
    for {} lt(i, 0x7700) { i := add(i, 0x60) j := add(j, 0x20) k := add(k, 0x60) l := add(l, 0x60) m := add(m, 0x20) n := add(n, 0x20) } {
        mstore(i, mulmod(1, mload(j), f_q))
        mstore(add(i, 0x20), addmod(mload(k), mload(l), f_q))
        mstore(add(i, 0x40), mulmod(sub(f_q, mload(m)), mload(n), f_q))
    }

    i := 0x7700
    j := 0x6860
    k := 0x76c0
    l := 0x76e0
    m := 0x1520
    n := 0x6880
    for {} lt(i, 0x7a00) { i := add(i, 0x60) j := add(j, 0x20) k := add(k, 0x60) l := add(l, 0x60) m := add(m, 0x60) n := add(n, 0x20) } {
        mstore(i, mulmod(1, mload(j), f_q))
        mstore(add(i, 0x20), addmod(mload(k), mload(l), f_q))
        mstore(add(i, 0x40), mulmod(sub(f_q, mload(m)), mload(n), f_q))
    }

    i := 0x7a00
    j := 0x6960
    k := 0x79c0
    l := 0x79e0
    m := 0xf40
    n := 0x6980
    for {} lt(i, 0x7ca0) { i := add(i, 0x60) j := add(j, 0x20) k := add(k, 0x60) l := add(l, 0x60) m := add(m, 0x20) n := add(n, 0x20) } {
        mstore(i, mulmod(1, mload(j), f_q))
        mstore(add(i, 0x20), addmod(mload(k), mload(l), f_q))
        mstore(add(i, 0x40), mulmod(sub(f_q, mload(m)), mload(n), f_q))
    }

mstore(0x7ca0, mulmod(1, mload(0x6a40), f_q))
mstore(0x7cc0, addmod(mload(0x7c60), mload(0x7c80), f_q))
mstore(0x7ce0, addmod(mload(0x7c40), mload(0x7ca0), f_q))
mstore(0x7d00, mulmod(sub(f_q, mload(0x1020)), mload(0x6a60), f_q))
mstore(0x7d20, mulmod(1, mload(0x6a60), f_q))
mstore(0x7d40, addmod(mload(0x7cc0), mload(0x7d00), f_q))
mstore(0x7d60, addmod(mload(0x7ce0), mload(0x7d20), f_q))
mstore(0x7d80, mulmod(sub(f_q, mload(0x1040)), mload(0x6a80), f_q))
mstore(0x7da0, mulmod(1, mload(0x6a80), f_q))
mstore(0x7dc0, addmod(mload(0x7d40), mload(0x7d80), f_q))
mstore(0x7de0, addmod(mload(0x7d60), mload(0x7da0), f_q))
mstore(0x7e00, mulmod(sub(f_q, mload(0x1060)), mload(0x6aa0), f_q))
mstore(0x7e20, mulmod(1, mload(0x6aa0), f_q))
mstore(0x7e40, addmod(mload(0x7dc0), mload(0x7e00), f_q))
mstore(0x7e60, addmod(mload(0x7de0), mload(0x7e20), f_q))
mstore(0x7e80, mulmod(sub(f_q, mload(0x1080)), mload(0x6ac0), f_q))
mstore(0x7ea0, mulmod(1, mload(0x6ac0), f_q))
mstore(0x7ec0, addmod(mload(0x7e40), mload(0x7e80), f_q))
mstore(0x7ee0, mulmod(sub(f_q, mload(0x10a0)), mload(0x6ae0), f_q))
mstore(0x7f00, mulmod(1, mload(0x6ae0), f_q))
mstore(0x7f20, addmod(mload(0x7ec0), mload(0x7ee0), f_q))
mstore(0x7f40, mulmod(sub(f_q, mload(0x10c0)), mload(0x6b00), f_q))
mstore(0x7f60, mulmod(1, mload(0x6b00), f_q))
mstore(0x7f80, addmod(mload(0x7f20), mload(0x7f40), f_q))
mstore(0x7fa0, mulmod(sub(f_q, mload(0x10e0)), mload(0x6b20), f_q))

    i := 0x7fc0
    j := 0x6b20
    k := 0x7f80
    l := 0x7fa0
    m := 0x1120
    n := 0x6b40
    for {} lt(i, 0x8bc0) { i := add(i, 0x60) j := add(j, 0x20) k := add(k, 0x60) l := add(l, 0x60) m := add(m, 0x20) n := add(n, 0x20) } {
        mstore(i, mulmod(1, mload(j), f_q))
        mstore(add(i, 0x20), addmod(mload(k), mload(l), f_q))
        mstore(add(i, 0x40), mulmod(sub(f_q, mload(m)), mload(n), f_q))
    }

mstore(0x8bc0, mulmod(1, mload(0x6f20), f_q))
mstore(0x8be0, addmod(mload(0x8b80), mload(0x8ba0), f_q))
mstore(0x8c00, mulmod(sub(f_q, mload(0x65a0)), mload(0x6f40), f_q))
mstore(0x8c20, mulmod(1, mload(0x6f40), f_q))
mstore(0x8c40, mulmod(mload(0x6520), mload(0x6f40), f_q))
mstore(0x8c60, mulmod(mload(0x6540), mload(0x6f40), f_q))
mstore(0x8c80, mulmod(mload(0x6560), mload(0x6f40), f_q))
mstore(0x8ca0, mulmod(mload(0x6580), mload(0x6f40), f_q))
mstore(0x8cc0, addmod(mload(0x8be0), mload(0x8c00), f_q))
mstore(0x8ce0, mulmod(sub(f_q, mload(0x1100)), mload(0x6f60), f_q))
mstore(0x8d00, mulmod(1, mload(0x6f60), f_q))
mstore(0x8d20, addmod(mload(0x8cc0), mload(0x8ce0), f_q))
mstore(0x8d40, mulmod(mload(0x8d20), 1, f_q))
mstore(0x8d60, mulmod(mload(0x6fe0), 1, f_q))
mstore(0x8d80, mulmod(mload(0x7040), 1, f_q))
mstore(0x8da0, mulmod(mload(0x70a0), 1, f_q))
mstore(0x8dc0, mulmod(mload(0x7100), 1, f_q))
mstore(0x8de0, mulmod(mload(0x7160), 1, f_q))
mstore(0x8e00, mulmod(mload(0x71c0), 1, f_q))
mstore(0x8e20, mulmod(mload(0x7220), 1, f_q))
mstore(0x8e40, mulmod(mload(0x7280), 1, f_q))
mstore(0x8e60, mulmod(mload(0x72e0), 1, f_q))
mstore(0x8e80, mulmod(mload(0x7340), 1, f_q))
mstore(0x8ea0, mulmod(mload(0x73a0), 1, f_q))
mstore(0x8ec0, mulmod(mload(0x7400), 1, f_q))
mstore(0x8ee0, mulmod(mload(0x7460), 1, f_q))
mstore(0x8f00, mulmod(mload(0x74c0), 1, f_q))
mstore(0x8f20, mulmod(mload(0x7520), 1, f_q))
mstore(0x8f40, mulmod(mload(0x7580), 1, f_q))
mstore(0x8f60, mulmod(mload(0x75e0), 1, f_q))
mstore(0x8f80, mulmod(mload(0x7640), 1, f_q))
mstore(0x8fa0, mulmod(mload(0x76a0), 1, f_q))
mstore(0x8fc0, mulmod(mload(0x7700), 1, f_q))
mstore(0x8fe0, mulmod(mload(0x7760), 1, f_q))
mstore(0x9000, mulmod(mload(0x77c0), 1, f_q))
mstore(0x9020, mulmod(mload(0x7820), 1, f_q))
mstore(0x9040, mulmod(mload(0x7880), 1, f_q))
mstore(0x9060, mulmod(mload(0x78e0), 1, f_q))
mstore(0x9080, mulmod(mload(0x7940), 1, f_q))
mstore(0x90a0, mulmod(mload(0x79a0), 1, f_q))
mstore(0x90c0, mulmod(mload(0x7a00), 1, f_q))
mstore(0x90e0, mulmod(mload(0x7a60), 1, f_q))
mstore(0x9100, mulmod(mload(0x7ac0), 1, f_q))
mstore(0x9120, mulmod(mload(0x7b20), 1, f_q))
mstore(0x9140, mulmod(mload(0x7b80), 1, f_q))
mstore(0x9160, mulmod(mload(0x7be0), 1, f_q))
mstore(0x9180, mulmod(mload(0x7e60), 1, f_q))
mstore(0x91a0, mulmod(mload(0x7ea0), 1, f_q))
mstore(0x91c0, mulmod(mload(0x7f00), 1, f_q))
mstore(0x91e0, mulmod(mload(0x7f60), 1, f_q))
mstore(0x9200, mulmod(mload(0x7fc0), 1, f_q))
mstore(0x9220, mulmod(mload(0x8020), 1, f_q))
mstore(0x9240, mulmod(mload(0x8080), 1, f_q))
mstore(0x9260, mulmod(mload(0x80e0), 1, f_q))
mstore(0x9280, mulmod(mload(0x8140), 1, f_q))
mstore(0x92a0, mulmod(mload(0x81a0), 1, f_q))
mstore(0x92c0, mulmod(mload(0x8200), 1, f_q))
mstore(0x92e0, mulmod(mload(0x8260), 1, f_q))
mstore(0x9300, mulmod(mload(0x82c0), 1, f_q))
mstore(0x9320, mulmod(mload(0x8320), 1, f_q))
mstore(0x9340, mulmod(mload(0x8380), 1, f_q))
mstore(0x9360, mulmod(mload(0x83e0), 1, f_q))
mstore(0x9380, mulmod(mload(0x8440), 1, f_q))
mstore(0x93a0, mulmod(mload(0x84a0), 1, f_q))
mstore(0x93c0, mulmod(mload(0x8500), 1, f_q))
mstore(0x93e0, mulmod(mload(0x8560), 1, f_q))
mstore(0x9400, mulmod(mload(0x85c0), 1, f_q))
mstore(0x9420, mulmod(mload(0x8620), 1, f_q))
mstore(0x9440, mulmod(mload(0x8680), 1, f_q))
mstore(0x9460, mulmod(mload(0x86e0), 1, f_q))
mstore(0x9480, mulmod(mload(0x8740), 1, f_q))
mstore(0x94a0, mulmod(mload(0x87a0), 1, f_q))
mstore(0x94c0, mulmod(mload(0x8800), 1, f_q))
mstore(0x94e0, mulmod(mload(0x8860), 1, f_q))
mstore(0x9500, mulmod(mload(0x88c0), 1, f_q))
mstore(0x9520, mulmod(mload(0x8920), 1, f_q))
mstore(0x9540, mulmod(mload(0x8980), 1, f_q))
mstore(0x9560, mulmod(mload(0x89e0), 1, f_q))
mstore(0x9580, mulmod(mload(0x8a40), 1, f_q))
mstore(0x95a0, mulmod(mload(0x8aa0), 1, f_q))
mstore(0x95c0, mulmod(mload(0x8b00), 1, f_q))
mstore(0x95e0, mulmod(mload(0x8b60), 1, f_q))
mstore(0x9600, mulmod(mload(0x8bc0), 1, f_q))
mstore(0x9620, mulmod(mload(0x8c20), 1, f_q))
mstore(0x9640, mulmod(mload(0x8c40), 1, f_q))
mstore(0x9660, mulmod(mload(0x8c60), 1, f_q))
mstore(0x9680, mulmod(mload(0x8c80), 1, f_q))
mstore(0x96a0, mulmod(mload(0x8ca0), 1, f_q))
mstore(0x96c0, mulmod(mload(0x8d00), 1, f_q))
mstore(0x96e0, mulmod(sub(f_q, mload(0xbe0)), 1, f_q))
mstore(0x9700, mulmod(sub(f_q, mload(0xea0)), mload(0x1820), f_q))
mstore(0x9720, addmod(mload(0x96e0), mload(0x9700), f_q))
mstore(0x9740, mulmod(sub(f_q, mload(0xec0)), mload(0x6620), f_q))
mstore(0x9760, addmod(mload(0x9720), mload(0x9740), f_q))
mstore(0x9780, mulmod(sub(f_q, mload(0xee0)), mload(0x6640), f_q))
mstore(0x97a0, addmod(mload(0x9760), mload(0x9780), f_q))
mstore(0x97c0, mulmod(sub(f_q, mload(0xf00)), mload(0x6660), f_q))
mstore(0x97e0, addmod(mload(0x97a0), mload(0x97c0), f_q))
mstore(0x9800, mulmod(sub(f_q, mload(0xf20)), mload(0x6680), f_q))
mstore(0x9820, addmod(mload(0x97e0), mload(0x9800), f_q))
mstore(0x9840, mulmod(sub(f_q, mload(0x1540)), mload(0x66a0), f_q))
mstore(0x9860, addmod(mload(0x9820), mload(0x9840), f_q))
mstore(0x9880, mulmod(sub(f_q, mload(0x15a0)), mload(0x66c0), f_q))
mstore(0x98a0, addmod(mload(0x9860), mload(0x9880), f_q))
mstore(0x98c0, mulmod(sub(f_q, mload(0x1600)), mload(0x66e0), f_q))
mstore(0x98e0, addmod(mload(0x98a0), mload(0x98c0), f_q))
mstore(0x9900, mulmod(sub(f_q, mload(0x1660)), mload(0x6700), f_q))
mstore(0x9920, addmod(mload(0x98e0), mload(0x9900), f_q))
mstore(0x9940, mulmod(sub(f_q, mload(0x16c0)), mload(0x6720), f_q))
mstore(0x9960, addmod(mload(0x9920), mload(0x9940), f_q))
mstore(0x9980, mulmod(sub(f_q, mload(0x1720)), mload(0x6740), f_q))
mstore(0x99a0, addmod(mload(0x9960), mload(0x9980), f_q))
mstore(0x99c0, mulmod(sub(f_q, mload(0x1780)), mload(0x6760), f_q))
mstore(0x99e0, addmod(mload(0x99a0), mload(0x99c0), f_q))
mstore(0x9a00, mulmod(sub(f_q, mload(0x17e0)), mload(0x6780), f_q))
mstore(0x9a20, addmod(mload(0x99e0), mload(0x9a00), f_q))
mstore(0x9a40, mulmod(mload(0x9a20), mload(0x1980), f_q))
mstore(0x9a60, mulmod(1, mload(0x1980), f_q))
mstore(0x9a80, mulmod(mload(0x6fe0), mload(0x1980), f_q))
mstore(0x9aa0, mulmod(mload(0x7040), mload(0x1980), f_q))
mstore(0x9ac0, mulmod(mload(0x70a0), mload(0x1980), f_q))
mstore(0x9ae0, mulmod(mload(0x7100), mload(0x1980), f_q))
mstore(0x9b00, mulmod(mload(0x7160), mload(0x1980), f_q))
mstore(0x9b20, mulmod(mload(0x71c0), mload(0x1980), f_q))
mstore(0x9b40, mulmod(mload(0x7220), mload(0x1980), f_q))
mstore(0x9b60, mulmod(mload(0x7280), mload(0x1980), f_q))
mstore(0x9b80, mulmod(mload(0x72e0), mload(0x1980), f_q))
mstore(0x9ba0, mulmod(mload(0x7340), mload(0x1980), f_q))
mstore(0x9bc0, mulmod(mload(0x73a0), mload(0x1980), f_q))
mstore(0x9be0, mulmod(mload(0x7400), mload(0x1980), f_q))
mstore(0x9c00, mulmod(mload(0x7460), mload(0x1980), f_q))
mstore(0x9c20, addmod(mload(0x8d40), mload(0x9a40), f_q))
mstore(0x9c40, addmod(1, mload(0x9a60), f_q))
mstore(0x9c60, addmod(mload(0x8d60), mload(0x9a80), f_q))
mstore(0x9c80, addmod(mload(0x8d80), mload(0x9aa0), f_q))
mstore(0x9ca0, addmod(mload(0x8da0), mload(0x9ac0), f_q))
mstore(0x9cc0, addmod(mload(0x8dc0), mload(0x9ae0), f_q))
mstore(0x9ce0, addmod(mload(0x8de0), mload(0x9b00), f_q))
mstore(0x9d00, addmod(mload(0x8fe0), mload(0x9b20), f_q))
mstore(0x9d20, addmod(mload(0x9000), mload(0x9b40), f_q))
mstore(0x9d40, addmod(mload(0x9020), mload(0x9b60), f_q))
mstore(0x9d60, addmod(mload(0x9040), mload(0x9b80), f_q))
mstore(0x9d80, addmod(mload(0x9060), mload(0x9ba0), f_q))
mstore(0x9da0, addmod(mload(0x9080), mload(0x9bc0), f_q))
mstore(0x9dc0, addmod(mload(0x90a0), mload(0x9be0), f_q))
mstore(0x9de0, addmod(mload(0x90c0), mload(0x9c00), f_q))
mstore(0x9e00, mulmod(sub(f_q, mload(0xc00)), 1, f_q))
mstore(0x9e20, mulmod(mload(0x9e00), mload(0x65c0), f_q))
mstore(0x9e40, mulmod(1, mload(0x65c0), f_q))
mstore(0x9e60, addmod(mload(0x9c20), mload(0x9e20), f_q))
mstore(0x9e80, addmod(mload(0x9c40), mload(0x9e40), f_q))
mstore(0x9ea0, mulmod(sub(f_q, mload(0x17a0)), 1, f_q))
mstore(0x9ec0, mulmod(sub(f_q, mload(0x1740)), mload(0x1820), f_q))
mstore(0x9ee0, addmod(mload(0x9ea0), mload(0x9ec0), f_q))
mstore(0x9f00, mulmod(sub(f_q, mload(0x16e0)), mload(0x6620), f_q))
mstore(0x9f20, addmod(mload(0x9ee0), mload(0x9f00), f_q))
mstore(0x9f40, mulmod(sub(f_q, mload(0x1680)), mload(0x6640), f_q))
mstore(0x9f60, addmod(mload(0x9f20), mload(0x9f40), f_q))
mstore(0x9f80, mulmod(sub(f_q, mload(0x1620)), mload(0x6660), f_q))
mstore(0x9fa0, addmod(mload(0x9f60), mload(0x9f80), f_q))
mstore(0x9fc0, mulmod(sub(f_q, mload(0x15c0)), mload(0x6680), f_q))
mstore(0x9fe0, addmod(mload(0x9fa0), mload(0x9fc0), f_q))
mstore(0xa000, mulmod(sub(f_q, mload(0x1560)), mload(0x66a0), f_q))
mstore(0xa020, addmod(mload(0x9fe0), mload(0xa000), f_q))
mstore(0xa040, mulmod(mload(0xa020), mload(0x65e0), f_q))
mstore(0xa060, mulmod(1, mload(0x65e0), f_q))
mstore(0xa080, mulmod(mload(0x6fe0), mload(0x65e0), f_q))
mstore(0xa0a0, mulmod(mload(0x7040), mload(0x65e0), f_q))
mstore(0xa0c0, mulmod(mload(0x70a0), mload(0x65e0), f_q))
mstore(0xa0e0, mulmod(mload(0x7100), mload(0x65e0), f_q))
mstore(0xa100, mulmod(mload(0x7160), mload(0x65e0), f_q))
mstore(0xa120, mulmod(mload(0x71c0), mload(0x65e0), f_q))
mstore(0xa140, addmod(mload(0x9e60), mload(0xa040), f_q))
mstore(0xa160, addmod(mload(0x9dc0), mload(0xa060), f_q))
mstore(0xa180, addmod(mload(0x9da0), mload(0xa080), f_q))
mstore(0xa1a0, addmod(mload(0x9d80), mload(0xa0a0), f_q))
mstore(0xa1c0, addmod(mload(0x9d60), mload(0xa0c0), f_q))
mstore(0xa1e0, addmod(mload(0x9d40), mload(0xa0e0), f_q))
mstore(0xa200, addmod(mload(0x9d20), mload(0xa100), f_q))
mstore(0xa220, addmod(mload(0x9d00), mload(0xa120), f_q))
mstore(0xa240, mulmod(1, mload(0xb80), f_q))
mstore(0xa260, mulmod(1, mload(0xa240), f_q))
mstore(0xa280, mulmod(7393649265675507591155086225434297871937368251641985215568891852805958167681, mload(0xb80), f_q))
mstore(0xa2a0, mulmod(mload(0x9a60), mload(0xa280), f_q))
mstore(0xa2c0, mulmod(18154240498369470423574571952998640420834620155273666494480695920805672807787, mload(0xb80), f_q))
mstore(0xa2e0, mulmod(mload(0x9e40), mload(0xa2c0), f_q))
mstore(0xa300, mulmod(10167250710514084151592399827148084713285735496006016499965216114801401041468, mload(0xb80), f_q))
mstore(0xa320, mulmod(mload(0xa060), mload(0xa300), f_q))
mstore(0xa340, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0xa360, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0xa380, mload(0xa140))
success := and(eq(staticcall(gas(), 0x7, 0xa340, 0x60, 0xa340, 0x40), 1), success)

function perform_operation_1(input1, input2, input3, input4, _success) -> valid {
    mstore(input1, mload(input2))
    mstore(add(input1, 0x20), mload(input3))
    mstore(add(input1, 0x40), mload(input4))
    valid := and(eq(staticcall(gas(), 0x7, input1, 0x60, input1, 0x40), 1), _success)
}

function perform_operation_2(input1, input2, input3, input4, input5, _success) -> valid {
    mstore(input1, mload(input2))
    mstore(add(input1, 0x20), mload(input3))
    mstore(add(input1, 0x40), mload(input4))
    mstore(add(input1, 0x60), mload(input5))
    valid := and(eq(staticcall(gas(), 0x6, input1, 0x80, input1, 0x40), 1), _success)
}

success := perform_operation_1(0xa3a0, 0x120, 0x140, 0x9e80, success)
success := perform_operation_2(0xa400, 0xa340, 0xa360, 0xa3a0, 0xa3c0, success)
success := perform_operation_1(0xa480, 0x160, 0x180, 0x9c60, success)
success := perform_operation_2(0xa4e0, 0xa400, 0xa420, 0xa480, 0xa4a0, success)
success := perform_operation_1(0xa560, 0x1a0, 0x1c0, 0x9c80, success)
success := perform_operation_2(0xa5c0, 0xa4e0, 0xa500, 0xa560, 0xa580, success)
success := perform_operation_1(0xa640, 0x1e0, 0x200, 0x9ca0, success)
success := perform_operation_2(0xa6a0, 0xa5c0, 0xa5e0, 0xa640, 0xa660, success)
success := perform_operation_1(0xa720, 0x220, 0x240, 0x9cc0, success)
success := perform_operation_2(0xa780, 0xa6a0, 0xa6c0, 0xa720, 0xa740, success)
success := perform_operation_1(0xa800, 0x260, 0x280, 0x9ce0, success)
success := perform_operation_2(0xa860, 0xa780, 0xa7a0, 0xa800, 0xa820, success)
success := perform_operation_1(0xa8e0, 0x2a0, 0x2c0, 0x8e00, success)
success := perform_operation_2(0xa940, 0xa860, 0xa880, 0xa8e0, 0xa900, success)
success := perform_operation_1(0xa9c0, 0x2e0, 0x300, 0x8e20, success)
success := perform_operation_2(0xaa20, 0xa940, 0xa960, 0xa9c0, 0xa9e0, success)
success := perform_operation_1(0xaaa0, 0x320, 0x340, 0x8e40, success)
success := perform_operation_2(0xab00, 0xaa20, 0xaa40, 0xaaa0, 0xaac0, success)
success := perform_operation_1(0xab80, 0x360, 0x380, 0x8e60, success)
success := perform_operation_2(0xabe0, 0xab00, 0xab20, 0xab80, 0xaba0, success)
success := perform_operation_1(0xac60, 0x3a0, 0x3c0, 0x8e80, success)
success := perform_operation_2(0xacc0, 0xabe0, 0xac00, 0xac60, 0xac80, success)
success := perform_operation_1(0xad40, 0x3e0, 0x400, 0x8ea0, success)
success := perform_operation_2(0xada0, 0xacc0, 0xace0, 0xad40, 0xad60, success)
success := perform_operation_1(0xae20, 0x420, 0x440, 0x8ec0, success)
success := perform_operation_2(0xae80, 0xada0, 0xadc0, 0xae20, 0xae40, success)
success := perform_operation_1(0xaf00, 0x460, 0x480, 0x8ee0, success)
success := perform_operation_2(0xaf60, 0xae80, 0xaea0, 0xaf00, 0xaf20, success)
success := perform_operation_1(0xafe0, 0x4a0, 0x4c0, 0x8f00, success)
success := perform_operation_2(0xb040, 0xaf60, 0xaf80, 0xafe0, 0xb000, success)
success := perform_operation_1(0xb0c0, 0x4e0, 0x500, 0x8f20, success)
success := perform_operation_2(0xb120, 0xb040, 0xb060, 0xb0c0, 0xb0e0, success)
success := perform_operation_1(0xb1a0, 0x520, 0x540, 0x8f40, success)
success := perform_operation_2(0xb200, 0xb120, 0xb140, 0xb1a0, 0xb1c0, success)
success := perform_operation_1(0xb280, 0x560, 0x580, 0x8f60, success)
success := perform_operation_2(0xb2e0, 0xb200, 0xb220, 0xb280, 0xb2a0, success)
success := perform_operation_1(0xb360, 0x5a0, 0x5c0, 0x8f80, success)
success := perform_operation_2(0xb3c0, 0xb2e0, 0xb300, 0xb360, 0xb380, success)
success := perform_operation_1(0xb440, 0x5e0, 0x600, 0x8fa0, success)
success := perform_operation_2(0xb4a0, 0xb3c0, 0xb3e0, 0xb440, 0xb460, success)
success := perform_operation_1(0xb520, 0x620, 0x640, 0x8fc0, success)
success := perform_operation_2(0xb580, 0xb4a0, 0xb4c0, 0xb520, 0xb540, success)
success := perform_operation_1(0xb600, 0x780, 0x7a0, 0xa220, success)
success := perform_operation_2(0xb660, 0xb580, 0xb5a0, 0xb600, 0xb620, success)
success := perform_operation_1(0xb6e0, 0x7c0, 0x7e0, 0xa200, success)
success := perform_operation_2(0xb740, 0xb660, 0xb680, 0xb6e0, 0xb700, success)
success := perform_operation_1(0xb7c0, 0x800, 0x820, 0xa1e0, success)
success := perform_operation_2(0xb820, 0xb740, 0xb760, 0xb7c0, 0xb7e0, success)
success := perform_operation_1(0xb8a0, 0x840, 0x860, 0xa1c0, success)
success := perform_operation_2(0xb900, 0xb820, 0xb840, 0xb8a0, 0xb8c0, success)
success := perform_operation_1(0xb980, 0x880, 0x8a0, 0xa1a0, success)
success := perform_operation_2(0xb9e0, 0xb900, 0xb920, 0xb980, 0xb9a0, success)
success := perform_operation_1(0xba60, 0x8c0, 0x8e0, 0xa180, success)
success := perform_operation_2(0xbac0, 0xb9e0, 0xba00, 0xba60, 0xba80, success)
success := perform_operation_1(0xbb40, 0x900, 0x920, 0xa160, success)
success := perform_operation_2(0xbba0, 0xbac0, 0xbae0, 0xbb40, 0xbb60, success)
success := perform_operation_1(0xbc20, 0x940, 0x960, 0x9de0, success)
success := perform_operation_2(0xbc80, 0xbba0, 0xbbc0, 0xbc20, 0xbc40, success)

function perform_operation_3(input1, input2, input3, input4, _success) -> valid {
    mstore(input1, input2)
    mstore(add(input1, 0x20), input3)
    mstore(add(input1, 0x40), mload(input4))
    valid := and(eq(staticcall(gas(), 0x7, input1, 0x60, input1, 0x40), 1), _success)
}

success := perform_operation_3(0xbd00, 0x18416ab9fed28269360dc99c4177cd8022a756a4fbb08ab215bcd847b60216fb, 0x1f76285842ab4dba6622cb947def515dd9d01408b3f635d4ff0e7401d3c9132b, 0x90e0, success)
success := perform_operation_2(0xbd60, 0xbc80, 0xbca0, 0xbd00, 0xbd20, success)
success := perform_operation_3(0xbde0, 0x2670cc96fb9cf72b81bf24cc324d9b511e3ea52b91c4fede4e677c32468ee2f9, 0x2a3dc5dda6611ee8b0ebc7a178db01ed4cb9f741149a6d9cbf9175acea0a4d17, 0x9100, success)
success := perform_operation_2(0xbe40, 0xbd60, 0xbd80, 0xbde0, 0xbe00, success)
success := perform_operation_3(0xbec0, 0x016d2e1cd1e4697294edfa54b6e8b01943da833bbe6272d22f37945642a4ba35, 0x1ae0611b16dfe24fd91bcb47d35850617d4df5cfccccb9bc618bbb304089e0e4, 0x9120, success)
success := perform_operation_2(0xbf20, 0xbe40, 0xbe60, 0xbec0, 0xbee0, success)
success := perform_operation_3(0xbfa0, 0x2ece8949518eb5cc30d355a5cf4231e796c3b72f38a0cde87a2e506addabf1a6, 0x26fbb7e691d32c51430b13fc63c0ef87bc022305de2efc5146153392a0425dea, 0x9140, success)
success := perform_operation_2(0xc000, 0xbf20, 0xbf40, 0xbfa0, 0xbfc0, success)
success := perform_operation_3(0xc080, 0x07dd0bdda81b6a56740c608db038bdc5aa778476594c1add2e17dd15b8cb7681, 0x04664c528bfb615f7d99cd90c1149a53364a8363ff7f27d73c2fbacaa7a44d64, 0x9160, success)
success := perform_operation_2(0xc0e0, 0xc000, 0xc020, 0xc080, 0xc0a0, success)
success := perform_operation_3(0xc160, 0x0000000000000000000000000000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000000000000000000000000000, 0x9180, success)
success := perform_operation_2(0xc1c0, 0xc0e0, 0xc100, 0xc160, 0xc180, success)
success := perform_operation_3(0xc240, 0x12855f63b794cdc90437146622d7d8e3b3dd674f60aca0184bafd3b626e2e52a, 0x1ab4402af88ea5146e925b8ac64e37fa3e77c5233641a6ec4563a6e60a6b342f, 0x91a0, success)
success := perform_operation_2(0xc2a0, 0xc1c0, 0xc1e0, 0xc240, 0xc260, success)
success := perform_operation_3(0xc320, 0x087d534b5f9d8bfec7416fca070eb6a37f78bad855df3a920f74f5cb2715a2e4, 0x1737714147b9c614894f09e8c8601c51b82f05a70ac618d30fd5987bfc459f50, 0x91c0, success)
success := perform_operation_2(0xc380, 0xc2a0, 0xc2c0, 0xc320, 0xc340, success)
success := perform_operation_3(0xc400, 0x0f26e9164808b446ba340b98456bbf20fc992318c57e346d99dc0e4fc4dcb1ba, 0x2364b72d910713b44e97ed3af08c861bc7acaf1b6071b56156f171fd0a02b0cd, 0x91e0, success)
success := perform_operation_2(0xc460, 0xc380, 0xc3a0, 0xc400, 0xc420, success)
success := perform_operation_3(0xc4e0, 0x2ef8c16a81be3c7de9a5138ec4de453db5379b398ea4bd409984346670a8014e, 0x303f9fb7db3c38ef00d982b44cf0692511ac10561cc672f086847ce6fc4511ed, 0x9200, success)
success := perform_operation_2(0xc540, 0xc460, 0xc480, 0xc4e0, 0xc500, success)
success := perform_operation_3(0xc5c0, 0x153ea4e56fdb86960bec4784e55c35a73d6dd0654b15f5505357c05b2535907e, 0x21fce5db5d5ea997d34a6b7a1e47497338109983e000fe7779cb426a1e5c9cab, 0x9220, success)
success := perform_operation_2(0xc620, 0xc540, 0xc560, 0xc5c0, 0xc5e0, success)
success := perform_operation_3(0xc6a0, 0x21c5f77e5b071d3de0630f41c15ddca82b81891d2d0ce2179a981021c8ee779d, 0x1e8190301d666449eaaf7c1b0d59eadf058fb034be2a40d3166103cff20fa066, 0x9240, success)
success := perform_operation_2(0xc700, 0xc620, 0xc640, 0xc6a0, 0xc6c0, success)
success := perform_operation_3(0xc780, 0x083a29f0ea4de1391b0a29d7139c4a73a060d58eadc236671e5652236d8907c6, 0x29bb198e459ce4cffa0e86e3b04713e4a67519782c16270a46001483c9ca8b67, 0x9260, success)
success := perform_operation_2(0xc7e0, 0xc700, 0xc720, 0xc780, 0xc7a0, success)
success := perform_operation_3(0xc860, 0x0c7306977b2dac8add05f17a6bf8f0d2b8729c3a9747b5f53637eb45977fb411, 0x0fcc68c460695aaea2d90c764f2154bbf52a0985d6ec015bd675aab75585432b, 0x9280, success)
success := perform_operation_2(0xc8c0, 0xc7e0, 0xc800, 0xc860, 0xc880, success)
success := perform_operation_3(0xc940, 0x295d87ea88ce90dcba2c744ab15bd89c5b6eee472faff270adc2eafee22e1f74, 0x16275098171e30d8e9f2dc175ae5c87140cec1c481a2c6bc65374ed6c11aa6ce, 0x92a0, success)
success := perform_operation_2(0xc9a0, 0xc8c0, 0xc8e0, 0xc940, 0xc960, success)
success := perform_operation_3(0xca20, 0x16579bb2a9754bf24475e871765be3a784f74315c7ef495008b16ad6d1f8a7a0, 0x1a5378a853bae53c2d0350c8cedac9b365e574198352bb6c91cb5e7d8f5f100f, 0x92c0, success)
success := perform_operation_2(0xca80, 0xc9a0, 0xc9c0, 0xca20, 0xca40, success)
success := perform_operation_3(0xcb00, 0x2d64f71e7552a7cc4409dd6ef42002df3d6b844873bf64c8475941c72eb45807, 0x239bc7198adb0ca169527c010dc1cd9335b6eae089de52daddc91590d22d9486, 0x92e0, success)
success := perform_operation_2(0xcb60, 0xca80, 0xcaa0, 0xcb00, 0xcb20, success)
success := perform_operation_3(0xcbe0, 0x2a2470bbbd7cd519cc7b28791258374f1b01cf6c00ac042b0bbdc6d4425ad090, 0x26e7eca6f7a85877de7b6fb0b226aa1e3e9c92700c2524181f25a9235765304a, 0x9300, success)
success := perform_operation_2(0xcc40, 0xcb60, 0xcb80, 0xcbe0, 0xcc00, success)
success := perform_operation_3(0xccc0, 0x2e30e8726768b5a2df93e49d2e0766162f686d4e4236cb44b4328c3faf78705f, 0x14d250c9e83287cc3678509f59c60b877401c5c974fb76468d297752befd13b8, 0x9320, success)
success := perform_operation_2(0xcd20, 0xcc40, 0xcc60, 0xccc0, 0xcce0, success)
success := perform_operation_3(0xcda0, 0x14e0e15e076a6d07bf1879836a12d7a8340a977cc297fa38463fa2174a5da87c, 0x1ab2391165e25ce3a3018510d093604754ae2aea2ae5c235ea42059325359def, 0x9340, success)
success := perform_operation_2(0xce00, 0xcd20, 0xcd40, 0xcda0, 0xcdc0, success)
success := perform_operation_3(0xce80, 0x150fa20c7695bf36e5e0c9aa8cda99fbe4e87811a1a8dbd9932b1753423c0596, 0x27f61c3f0b7a84798075e9f173c1fc13aab305053c97d8cffcc1ecdf73be9f14, 0x9360, success)
success := perform_operation_2(0xcee0, 0xce00, 0xce20, 0xce80, 0xcea0, success)
success := perform_operation_3(0xcf60, 0x23141563c5c29acf8146e663db35e4d250d7c029a965251070e2e61f05c78fbe, 0x0b3fbacf157264de471c46a4866cb97cc74be1a1e091471f03cc611f246a8ee7, 0x9380, success)
success := perform_operation_2(0xcfc0, 0xcee0, 0xcf00, 0xcf60, 0xcf80, success)
success := perform_operation_3(0xd040, 0x0613e59df19a352b875bc4e08721829e73418695c394694eda40027d25b3e639, 0x0366abaadbebf534f6cd59cf488d87d509a7af772973309ffdc81ace68be6884, 0x93a0, success)
success := perform_operation_2(0xd0a0, 0xcfc0, 0xcfe0, 0xd040, 0xd060, success)
success := perform_operation_3(0xd120, 0x0f703e28b1941d501a6b7e325521f1b3233ece26243981e835d0c9709889af73, 0x2005e9ddf2ab2b57cb8eb8c49fa970a1554cdc2439125d13fa53e27f8195642c, 0x93c0, success)
success := perform_operation_2(0xd180, 0xd0a0, 0xd0c0, 0xd120, 0xd140, success)
success := perform_operation_3(0xd200, 0x1a3dd66d1c8618a93041b58e967525441ff59fc4de854fb577d11f4437da9699, 0x0e886b4d04ad6477273354fca83064538bab05dd9b13969203780cfc446329e7, 0x93e0, success)
success := perform_operation_2(0xd260, 0xd180, 0xd1a0, 0xd200, 0xd220, success)
success := perform_operation_3(0xd2e0, 0x2b5d38c09e60191692ad3375d9e4067cf2839c564e801ab860331f1551690bd5, 0x21219919a9d4d162fe958c94d67baeed410893f3ccd7bf626a62759ffbbb187e, 0x9400, success)
success := perform_operation_2(0xd340, 0xd260, 0xd280, 0xd2e0, 0xd300, success)
success := perform_operation_3(0xd3c0, 0x2140e07b2be6c4eef3141181e62abf4ce5fe522627f32125ee398e2dcd0a4c11, 0x0b4593ea6d79d6e0ff7aa97442e50be446eca97d13a47cf88960cad0878c3f76, 0x9420, success)
success := perform_operation_2(0xd420, 0xd340, 0xd360, 0xd3c0, 0xd3e0, success)
success := perform_operation_3(0xd4a0, 0x03c345d57fe760dcc2a396c867b5de7529104cafa7a69de8bb85cb702ee75243, 0x2a6b1395edc4edf92792b452c4bdf69eaa5a136813b1ee5a9abf63927c32508c, 0x9440, success)
success := perform_operation_2(0xd500, 0xd420, 0xd440, 0xd4a0, 0xd4c0, success)
success := perform_operation_3(0xd580, 0x23ebb950d458c6b243687c5b4215596d913ef504a6d5daa56f07d727ad0ea408, 0x0595210b00e37c8da2f7fea58d636055fb03a72e8cf12780d41a9029d01d690f, 0x9460, success)
success := perform_operation_2(0xd5e0, 0xd500, 0xd520, 0xd580, 0xd5a0, success)
success := perform_operation_3(0xd660, 0x097ba66ad5a8439bb2d5a450e22ba07f4eb090aa54ac8578f2a7ff9838247440, 0x0dd6097ab3eefb097aa6c9668757fc71f758e737738811fa5dc5fe5fb6fc9da2, 0x9480, success)
success := perform_operation_2(0xd6c0, 0xd5e0, 0xd600, 0xd660, 0xd680, success)
success := perform_operation_3(0xd740, 0x28e50e161ce2e45390a221ab37b10e2e88e009435e570324766ea82165d14ef3, 0x1502143c29acbe4ca2b73d2bc5a1fcab6d368401547f59e37cbc3fbb7ccba3df, 0x94a0, success)
success := perform_operation_2(0xd7a0, 0xd6c0, 0xd6e0, 0xd740, 0xd760, success)
success := perform_operation_3(0xd820, 0x1d0749cfdeebdf987ccd949bd5b146524b694d2f13616dd2010a7634df7421a3, 0x06862ae94a1a75e6ceea60a627bfa53b369dadb1c019c5da5f4152fd0a367f94, 0x94c0, success)
success := perform_operation_2(0xd880, 0xd7a0, 0xd7c0, 0xd820, 0xd840, success)
success := perform_operation_3(0xd900, 0x2ed205585da1d62992045ca8250403b539b6defe184560376dd9cc5555d74f1e, 0x06447567e40d16160a748467d238eda8d38dda23de0a722d36d9c750f104f3fa, 0x94e0, success)
success := perform_operation_2(0xd960, 0xd880, 0xd8a0, 0xd900, 0xd920, success)
success := perform_operation_3(0xd9e0, 0x0bdf7c2bee32d493582929d89688c061f6f4a18bb22d85e0ace2b24c2e8a96ea, 0x02e4db8b7e327ba3735403a01196a1d4d4a6393a11c851d2848fdd92711a62be, 0x9500, success)
success := perform_operation_2(0xda40, 0xd960, 0xd980, 0xd9e0, 0xda00, success)
success := perform_operation_3(0xdac0, 0x0dc6be344bdfddbfcb9e16e141c12451f632051f2c7532ab6d77814878f50465, 0x162ff7bd7bff8c8e2f011f5103b57e7e572c267e43876822453935274fac7581, 0x9520, success)
success := perform_operation_2(0xdb20, 0xda40, 0xda60, 0xdac0, 0xdae0, success)
success := perform_operation_3(0xdba0, 0x1f4e64623be1a6823bc9c5d0a1a9057f27df561d5ff21452c0c6c26d2908ab4f, 0x29b2a0ece96b92a3a4d5456d6b23e4dcddd52696c140fba017c5f6a9f5195be2, 0x9540, success)
success := perform_operation_2(0xdc00, 0xdb20, 0xdb40, 0xdba0, 0xdbc0, success)
success := perform_operation_3(0xdc80, 0x02748832fb4b9e38138be32367cffb690a07cfa1c7d98affb2b093e96f1ba43a, 0x1a360c0fe3b0e2c30d2074484f67f69797cb43dcf8d3ce0ef8515aa4c6389e6b, 0x9560, success)
success := perform_operation_2(0xdce0, 0xdc00, 0xdc20, 0xdc80, 0xdca0, success)
success := perform_operation_3(0xdd60, 0x09b35b62b5b37d0ffb61827168e96eb10f9fbbff14f4f2f8eee49d5c40f374c9, 0x2fc1dd916357c9d3161b6797d9a38ce5c8d440b1d23720107cd704cc263bb384, 0x9580, success)
success := perform_operation_2(0xddc0, 0xdce0, 0xdd00, 0xdd60, 0xdd80, success)
success := perform_operation_3(0xde40, 0x17cdbb7a94a43bdf1e74aa49d73885f228ff195cca0b4785bfd7e46a8e98b4a4, 0x144861d510f3fd5fc77f3bb38164fe9f885e3b3d708f4f46bd7a8151b6e35316, 0x95a0, success)
success := perform_operation_2(0xdea0, 0xddc0, 0xdde0, 0xde40, 0xde60, success)
success := perform_operation_3(0xdf20, 0x2e94a71492f4620794116b8b27d762c504d438a33f637538658dfd024dd04df6, 0x2c46ff832ff5b553828d224080bf0805f1eee316a771bf57d0802d27dab4c93b, 0x95c0, success)
success := perform_operation_2(0xdf80, 0xdea0, 0xdec0, 0xdf20, 0xdf40, success)
success := perform_operation_3(0xe000, 0x2dc7c709f71d5ecd68eeaf85e6fb7cbc6bac2be00dbee82e7596999f01179077, 0x28716b4364c87d3da3efb6c5b4db54b190e22da6c02784b33d52bd1c58108a82, 0x95e0, success)
success := perform_operation_2(0xe060, 0xdf80, 0xdfa0, 0xe000, 0xe020, success)
success := perform_operation_3(0xe0e0, 0x16da0de86a2a619ec5c5baa961a730eaae3fbae5aa372833ff332b38e84a0f55, 0x17d1494724feee98c8c7e21795fa8fc39384817695f729406ec1dd41c99809b6, 0x9600, success)
success := perform_operation_2(0xe140, 0xe060, 0xe080, 0xe0e0, 0xe100, success)
success := perform_operation_1(0xe1c0, 0xa20, 0xa40, 0x9620, success)
success := perform_operation_2(0xe220, 0xe140, 0xe160, 0xe1c0, 0xe1e0, success)
success := perform_operation_1(0xe2a0, 0xa60, 0xa80, 0x9640, success)
success := perform_operation_2(0xe300, 0xe220, 0xe240, 0xe2a0, 0xe2c0, success)
success := perform_operation_1(0xe380, 0xaa0, 0xac0, 0x9660, success)
success := perform_operation_2(0xe3e0, 0xe300, 0xe320, 0xe380, 0xe3a0, success)
success := perform_operation_1(0xe460, 0xae0, 0xb00, 0x9680, success)
success := perform_operation_2(0xe4c0, 0xe3e0, 0xe400, 0xe460, 0xe480, success)
success := perform_operation_1(0xe540, 0xb20, 0xb40, 0x96a0, success)
success := perform_operation_2(0xe5a0, 0xe4c0, 0xe4e0, 0xe540, 0xe560, success)
success := perform_operation_1(0xe620, 0x980, 0x9a0, 0x96c0, success)
success := perform_operation_2(0xe680, 0xe5a0, 0xe5c0, 0xe620, 0xe640, success)
success := perform_operation_1(0xe700, 0x1860, 0x1880, 0xa260, success)
success := perform_operation_2(0xe760, 0xe680, 0xe6a0, 0xe700, 0xe720, success)
success := perform_operation_1(0xe7e0, 0x18a0, 0x18c0, 0xa2a0, success)
success := perform_operation_2(0xe840, 0xe760, 0xe780, 0xe7e0, 0xe800, success)
success := perform_operation_1(0xe8c0, 0x18e0, 0x1900, 0xa2e0, success)
success := perform_operation_2(0xe920, 0xe840, 0xe860, 0xe8c0, 0xe8e0, success)
success := perform_operation_1(0xe9a0, 0x1920, 0x1940, 0xa320, success)
success := perform_operation_2(0xea00, 0xe920, 0xe940, 0xe9a0, 0xe9c0, success)
success := perform_operation_1(0xea80, 0x18a0, 0x18c0, 0x9a60, success)
success := perform_operation_2(0xeae0, 0x1860, 0x1880, 0xea80, 0xeaa0, success)
success := perform_operation_1(0xeb60, 0x18e0, 0x1900, 0x9e40, success)
success := perform_operation_2(0xebc0, 0xeae0, 0xeb00, 0xeb60, 0xeb80, success)
success := perform_operation_1(0xec40, 0x1920, 0x1940, 0xa060, success)
success := perform_operation_2(0xeca0, 0xebc0, 0xebe0, 0xec40, 0xec60, success)

mstore(0xed20, mload(0xea00))
                    mstore(0xed40, mload(0xea20))
mstore(0xed60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0xed80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0xeda0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0xedc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0xede0, mload(0xeca0))
                    mstore(0xee00, mload(0xecc0))
mstore(0xee20, 0x2a4267b7f1d5b767acd046d7e1e6434143a16020d50e0594674d9e43ddbd4e45)
            mstore(0xee40, 0x2f5e8e7addce9702273e72b5634f7582855e4f5a14484753bf3dff4d42ef310b)
            mstore(0xee60, 0x14fc3db0fa3eb0d176b410ed87e7b215dd6e8d38d77b4a0ab91a9d4ee94f949b)
            mstore(0xee80, 0x29e4a1a9184b6dbecbe7224bf2bad3ba79e21beb1a72fb1297b49a6391e22386)
success := and(eq(staticcall(gas(), 0x8, 0xed20, 0x180, 0xed20, 0x20), 1), success)
success := and(eq(mload(0xed20), 1), success)

            // Revert if anything fails
            if iszero(success) { revert(0, 0) }

            // Return empty bytes on success
            return(0, 0)

        }
    }
}